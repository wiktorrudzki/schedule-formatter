{"ast":null,"code":"import { cloneNode, Document } from 'domhandler';\n/**\n * Check if the DOM element is a tag.\n *\n * `isTag(type)` includes `<script>` and `<style>` tags.\n *\n * @private\n * @category Utils\n * @param type - The DOM node to check.\n * @returns Whether the node is a tag.\n */\nexport { isTag } from 'domhandler';\n/**\n * Checks if an object is a Cheerio instance.\n *\n * @category Utils\n * @param maybeCheerio - The object to check.\n * @returns Whether the object is a Cheerio instance.\n */\nexport function isCheerio(maybeCheerio) {\n  return maybeCheerio.cheerio != null;\n}\n/**\n * Convert a string to camel case notation.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in camel case notation.\n */\nexport function camelCase(str) {\n  return str.replace(/[_.-](\\w|$)/g, (_, x) => x.toUpperCase());\n}\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in \"CSS case\".\n */\nexport function cssCase(str) {\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n}\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory\n * pressure introduced by _make.\n *\n * @category Utils\n * @param array - The array to iterate over.\n * @param fn - Function to call.\n * @returns The original instance.\n */\nexport function domEach(array, fn) {\n  const len = array.length;\n  for (let i = 0; i < len; i++) fn(array[i], i);\n  return array;\n}\n/**\n * Create a deep copy of the given DOM structure. Sets the parents of the copies\n * of the passed nodes to `null`.\n *\n * @private\n * @category Utils\n * @param dom - The domhandler-compliant DOM structure.\n * @returns - The cloned DOM.\n */\nexport function cloneDom(dom) {\n  const clone = 'length' in dom ? Array.prototype.map.call(dom, el => cloneNode(el, true)) : [cloneNode(dom, true)];\n  // Add a root node around the cloned nodes\n  const root = new Document(clone);\n  clone.forEach(node => {\n    node.parent = root;\n  });\n  return clone;\n}\nvar CharacterCodes;\n(function (CharacterCodes) {\n  CharacterCodes[CharacterCodes[\"LowerA\"] = 97] = \"LowerA\";\n  CharacterCodes[CharacterCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n  CharacterCodes[CharacterCodes[\"UpperA\"] = 65] = \"UpperA\";\n  CharacterCodes[CharacterCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n  CharacterCodes[CharacterCodes[\"Exclamation\"] = 33] = \"Exclamation\";\n})(CharacterCodes || (CharacterCodes = {}));\n/**\n * Check if string is HTML.\n *\n * Tests for a `<` within a string, immediate followed by a letter and\n * eventually followed by a `>`.\n *\n * @private\n * @category Utils\n * @param str - The string to check.\n * @returns Indicates if `str` is HTML.\n */\nexport function isHtml(str) {\n  const tagStart = str.indexOf('<');\n  if (tagStart < 0 || tagStart > str.length - 3) return false;\n  const tagChar = str.charCodeAt(tagStart + 1);\n  return (tagChar >= CharacterCodes.LowerA && tagChar <= CharacterCodes.LowerZ || tagChar >= CharacterCodes.UpperA && tagChar <= CharacterCodes.UpperZ || tagChar === CharacterCodes.Exclamation) && str.includes('>', tagStart + 2);\n}","map":{"version":3,"mappings":"AAAA,SAAuBA,SAAS,EAAEC,QAAQ,QAAQ,YAAY;AAG9D;;;;;;;;;;AAUA,SAASC,KAAK,QAAQ,YAAY;AAElC;;;;;;;AAOA,OAAM,SAAUC,SAAS,CAAIC,YAAiB;EAC5C,OAAOA,YAAY,CAACC,OAAO,IAAI,IAAI;AACrC;AAEA;;;;;;;;AAQA,OAAM,SAAUC,SAAS,CAACC,GAAW;EACnC,OAAOA,GAAG,CAACC,OAAO,CAAC,cAAc,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,WAAW,EAAE,CAAC;AAC/D;AAEA;;;;;;;;;AASA,OAAM,SAAUC,OAAO,CAACL,GAAW;EACjC,OAAOA,GAAG,CAACC,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC,CAACK,WAAW,EAAE;AACnD;AAEA;;;;;;;;;;;AAWA,OAAM,SAAUC,OAAO,CAGrBC,KAAU,EAAEC,EAAoC;EAChD,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM;EACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,EAAEE,CAAC,EAAE,EAAEH,EAAE,CAACD,KAAK,CAACI,CAAC,CAAC,EAAEA,CAAC,CAAC;EAC7C,OAAOJ,KAAK;AACd;AAEA;;;;;;;;;AASA,OAAM,SAAUK,QAAQ,CAAoBC,GAAY;EACtD,MAAMC,KAAK,GACT,QAAQ,IAAID,GAAG,GACVE,KAAK,CAACC,SAAS,CAACC,GAAG,CAACC,IAAI,CAACL,GAAG,EAAGM,EAAE,IAAK3B,SAAS,CAAC2B,EAAE,EAAE,IAAI,CAAC,CAAS,GACnE,CAAC3B,SAAS,CAACqB,GAAG,EAAE,IAAI,CAAC,CAAC;EAE5B;EACA,MAAMO,IAAI,GAAG,IAAI3B,QAAQ,CAACqB,KAAK,CAAC;EAChCA,KAAK,CAACO,OAAO,CAAEC,IAAI,IAAI;IACrBA,IAAI,CAACC,MAAM,GAAGH,IAAI;EACpB,CAAC,CAAC;EAEF,OAAON,KAAK;AACd;AAEA,IAAWU,cAMV;AAND,WAAWA,cAAc;EACvBA,wDAAW;EACXA,yDAAY;EACZA,wDAAW;EACXA,wDAAW;EACXA,kEAAgB;AAClB,CAAC,EANUA,cAAc,KAAdA,cAAc;AAQzB;;;;;;;;;;;AAWA,OAAM,SAAUC,MAAM,CAAC1B,GAAW;EAChC,MAAM2B,QAAQ,GAAG3B,GAAG,CAAC4B,OAAO,CAAC,GAAG,CAAC;EAEjC,IAAID,QAAQ,GAAG,CAAC,IAAIA,QAAQ,GAAG3B,GAAG,CAACW,MAAM,GAAG,CAAC,EAAE,OAAO,KAAK;EAE3D,MAAMkB,OAAO,GAAG7B,GAAG,CAAC8B,UAAU,CAACH,QAAQ,GAAG,CAAC,CAAC;EAE5C,OACE,CAAEE,OAAO,IAAIJ,cAAc,CAACM,MAAM,IAAIF,OAAO,IAAIJ,cAAc,CAACO,MAAM,IACnEH,OAAO,IAAIJ,cAAc,CAACQ,MAAM,IAAIJ,OAAO,IAAIJ,cAAc,CAACS,MAAO,IACtEL,OAAO,KAAKJ,cAAc,CAACU,WAAW,KACxCnC,GAAG,CAACoC,QAAQ,CAAC,GAAG,EAAET,QAAQ,GAAG,CAAC,CAAC;AAEnC","names":["cloneNode","Document","isTag","isCheerio","maybeCheerio","cheerio","camelCase","str","replace","_","x","toUpperCase","cssCase","toLowerCase","domEach","array","fn","len","length","i","cloneDom","dom","clone","Array","prototype","map","call","el","root","forEach","node","parent","CharacterCodes","isHtml","tagStart","indexOf","tagChar","charCodeAt","LowerA","LowerZ","UpperA","UpperZ","Exclamation","includes"],"sources":["utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}