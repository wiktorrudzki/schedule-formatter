{"ast":null,"code":"import htmlDecodeTree from \"./generated/decode-data-html.js\";\nimport xmlDecodeTree from \"./generated/decode-data-xml.js\";\nimport decodeCodePoint from \"./decode_codepoint.js\";\n// Re-export for use by eg. htmlparser2\nexport { htmlDecodeTree, xmlDecodeTree, decodeCodePoint };\nexport { replaceCodePoint, fromCodePoint } from \"./decode_codepoint.js\";\nvar CharCodes;\n(function (CharCodes) {\n  CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n  CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n  CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n  CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n  CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n  CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n  CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n  /** Bit that needs to be set to convert an upper case ASCII character to lower case */\n  CharCodes[CharCodes[\"To_LOWER_BIT\"] = 32] = \"To_LOWER_BIT\";\n})(CharCodes || (CharCodes = {}));\nexport var BinTrieFlags;\n(function (BinTrieFlags) {\n  BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags || (BinTrieFlags = {}));\nfunction getDecoder(decodeTree) {\n  return function decodeHTMLBinary(str, strict) {\n    var ret = \"\";\n    var lastIdx = 0;\n    var strIdx = 0;\n    while ((strIdx = str.indexOf(\"&\", strIdx)) >= 0) {\n      ret += str.slice(lastIdx, strIdx);\n      lastIdx = strIdx;\n      // Skip the \"&\"\n      strIdx += 1;\n      // If we have a numeric entity, handle this separately.\n      if (str.charCodeAt(strIdx) === CharCodes.NUM) {\n        // Skip the leading \"&#\". For hex entities, also skip the leading \"x\".\n        var start = strIdx + 1;\n        var base = 10;\n        var cp = str.charCodeAt(start);\n        if ((cp | CharCodes.To_LOWER_BIT) === CharCodes.LOWER_X) {\n          base = 16;\n          strIdx += 1;\n          start += 1;\n        }\n        do {\n          cp = str.charCodeAt(++strIdx);\n        } while (cp >= CharCodes.ZERO && cp <= CharCodes.NINE || base === 16 && (cp | CharCodes.To_LOWER_BIT) >= CharCodes.LOWER_A && (cp | CharCodes.To_LOWER_BIT) <= CharCodes.LOWER_F);\n        if (start !== strIdx) {\n          var entity = str.substring(start, strIdx);\n          var parsed = parseInt(entity, base);\n          if (str.charCodeAt(strIdx) === CharCodes.SEMI) {\n            strIdx += 1;\n          } else if (strict) {\n            continue;\n          }\n          ret += decodeCodePoint(parsed);\n          lastIdx = strIdx;\n        }\n        continue;\n      }\n      var resultIdx = 0;\n      var excess = 1;\n      var treeIdx = 0;\n      var current = decodeTree[treeIdx];\n      for (; strIdx < str.length; strIdx++, excess++) {\n        treeIdx = determineBranch(decodeTree, current, treeIdx + 1, str.charCodeAt(strIdx));\n        if (treeIdx < 0) break;\n        current = decodeTree[treeIdx];\n        var masked = current & BinTrieFlags.VALUE_LENGTH;\n        // If the branch is a value, store it and continue\n        if (masked) {\n          // If we have a legacy entity while parsing strictly, just skip the number of bytes\n          if (!strict || str.charCodeAt(strIdx) === CharCodes.SEMI) {\n            resultIdx = treeIdx;\n            excess = 0;\n          }\n          // The mask is the number of bytes of the value, including the current byte.\n          var valueLength = (masked >> 14) - 1;\n          if (valueLength === 0) break;\n          treeIdx += valueLength;\n        }\n      }\n      if (resultIdx !== 0) {\n        var _valueLength = (decodeTree[resultIdx] & BinTrieFlags.VALUE_LENGTH) >> 14;\n        ret += _valueLength === 1 ? String.fromCharCode(decodeTree[resultIdx] & ~BinTrieFlags.VALUE_LENGTH) : _valueLength === 2 ? String.fromCharCode(decodeTree[resultIdx + 1]) : String.fromCharCode(decodeTree[resultIdx + 1], decodeTree[resultIdx + 2]);\n        lastIdx = strIdx - excess + 1;\n      }\n    }\n    return ret + str.slice(lastIdx);\n  };\n}\nexport function determineBranch(decodeTree, current, nodeIdx, char) {\n  var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n  var jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n  // Case 1: Single branch encoded in jump offset\n  if (branchCount === 0) {\n    return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n  }\n  // Case 2: Multiple branches encoded in jump table\n  if (jumpOffset) {\n    var value = char - jumpOffset;\n    return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;\n  }\n  // Case 3: Multiple branches encoded in dictionary\n  // Binary search for the character.\n  var lo = nodeIdx;\n  var hi = lo + branchCount - 1;\n  while (lo <= hi) {\n    var mid = lo + hi >>> 1;\n    var midVal = decodeTree[mid];\n    if (midVal < char) {\n      lo = mid + 1;\n    } else if (midVal > char) {\n      hi = mid - 1;\n    } else {\n      return decodeTree[mid + branchCount];\n    }\n  }\n  return -1;\n}\nvar htmlDecoder = getDecoder(htmlDecodeTree);\nvar xmlDecoder = getDecoder(xmlDecodeTree);\n/**\n * Decodes an HTML string, allowing for entities not terminated by a semi-colon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeHTML(str) {\n  return htmlDecoder(str, false);\n}\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semi-colon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeHTMLStrict(str) {\n  return htmlDecoder(str, true);\n}\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semi-colon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeXML(str) {\n  return xmlDecoder(str, true);\n}","map":{"version":3,"mappings":"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","names":["htmlDecodeTree","xmlDecodeTree","decodeCodePoint","replaceCodePoint","fromCodePoint","CharCodes","BinTrieFlags","getDecoder","decodeTree","decodeHTMLBinary","str","strict","ret","lastIdx","strIdx","indexOf","slice","charCodeAt","NUM","start","base","cp","To_LOWER_BIT","LOWER_X","ZERO","NINE","LOWER_A","LOWER_F","entity","substring","parsed","parseInt","SEMI","resultIdx","excess","treeIdx","current","length","determineBranch","masked","VALUE_LENGTH","valueLength","String","fromCharCode","nodeIdx","char","branchCount","BRANCH_LENGTH","jumpOffset","JUMP_TABLE","value","lo","hi","mid","midVal","htmlDecoder","xmlDecoder","decodeHTML","decodeHTMLStrict","decodeXML"],"sources":["decode.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}