{"ast":null,"code":"var _jsxFileName = \"C:\\\\programowanko\\\\react\\\\schedule-formatter\\\\schedule-formatter\\\\src\\\\components\\\\template\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { addHours, addMinutes, addRemaining } from \"./createCells\";\nimport \"./template.css\";\nimport { getData } from \"../../data/Scrapper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Template = _ref => {\n  _s();\n  let {\n    rows,\n    columns,\n    daysOfWeek\n  } = _ref;\n  const grid = rows * columns;\n  const [data, setData] = useState([]);\n  const date = new Date(\"December 14, 2026 06:45:00\");\n  const endDate = new Date(\"December 14, 2026 07:30:00\");\n  let hoursAndMinutes = date.getHours() + \":\" + date.getMinutes();\n  let endHoursAndMinutes = endDate.getHours() + \":\" + endDate.getMinutes();\n\n  // getData().then(result => {\n  //   setData(result)\n  // })\n\n  useEffect(() => {\n    getData().then(result => {\n      setData(result.join().split(\",\").map(element => element.trim()));\n    });\n  }, []);\n  data.forEach(element => {\n    console.log(element.slice(-2));\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"template\",\n    children: [...Array(grid)].map((e, i) => {\n      if (i < columns) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell\",\n          children: daysOfWeek[i]\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this);\n      }\n      if (i % columns * 2 === 0) {\n        hoursAndMinutes = addMinutes(date);\n        hoursAndMinutes = addRemaining(hoursAndMinutes);\n        endHoursAndMinutes = addMinutes(endDate);\n        endHoursAndMinutes = addRemaining(endHoursAndMinutes);\n      } else if (i % columns === 0) {\n        hoursAndMinutes = addHours(date);\n        hoursAndMinutes = addRemaining(hoursAndMinutes);\n        endHoursAndMinutes = addMinutes(endDate);\n        endHoursAndMinutes = addRemaining(endHoursAndMinutes);\n      }\n      return i % columns === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell\",\n        children: [hoursAndMinutes, \" - \", endHoursAndMinutes]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell\",\n        children: \"\\xA0\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(Template, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = Template;\nexport default Template;\nvar _c;\n$RefreshReg$(_c, \"Template\");","map":{"version":3,"names":["useEffect","useState","addHours","addMinutes","addRemaining","getData","Template","rows","columns","daysOfWeek","grid","data","setData","date","Date","endDate","hoursAndMinutes","getHours","getMinutes","endHoursAndMinutes","then","result","join","split","map","element","trim","forEach","console","log","slice","Array","e","i"],"sources":["C:/programowanko/react/schedule-formatter/schedule-formatter/src/components/template/index.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { addHours, addMinutes, addRemaining } from \"./createCells\";\r\nimport \"./template.css\";\r\nimport { getData } from \"../../data/Scrapper\";\r\n\r\ntype Props = {\r\n  rows: number;\r\n  columns: number;\r\n  daysOfWeek: string[];\r\n};\r\n\r\nconst Template: React.FC<Props> = ({ rows, columns, daysOfWeek }) => {\r\n  const grid = rows * columns;\r\n  const [data, setData] = useState<string[]>([]);\r\n\r\n  const date = new Date(\"December 14, 2026 06:45:00\");\r\n  const endDate = new Date(\"December 14, 2026 07:30:00\");\r\n  let hoursAndMinutes = date.getHours() + \":\" + date.getMinutes();\r\n  let endHoursAndMinutes = endDate.getHours() + \":\" + endDate.getMinutes();\r\n\r\n  // getData().then(result => {\r\n  //   setData(result)\r\n  // })\r\n\r\n  useEffect(() => {\r\n    getData().then((result) => {\r\n      setData(\r\n        result\r\n          .join()\r\n          .split(\",\")\r\n          .map((element) => element.trim())\r\n      );\r\n    });\r\n  }, []);\r\n\r\n  data.forEach(element => {\r\n    console.log(element.slice(-2))\r\n  })\r\n\r\n  return (\r\n    <div className=\"template\">\r\n      {[...Array(grid)].map((e, i) => {\r\n        if (i < columns) {\r\n          return (\r\n            <div key={i} className=\"cell\">\r\n              {daysOfWeek[i]}\r\n            </div>\r\n          );\r\n        }\r\n\r\n        if ((i % columns) * 2 === 0) {\r\n          hoursAndMinutes = addMinutes(date);\r\n          hoursAndMinutes = addRemaining(hoursAndMinutes);\r\n          endHoursAndMinutes = addMinutes(endDate);\r\n          endHoursAndMinutes = addRemaining(endHoursAndMinutes);\r\n        } else if (i % columns === 0) {\r\n          hoursAndMinutes = addHours(date);\r\n          hoursAndMinutes = addRemaining(hoursAndMinutes);\r\n          endHoursAndMinutes = addMinutes(endDate);\r\n          endHoursAndMinutes = addRemaining(endHoursAndMinutes);\r\n        }\r\n\r\n        return i % columns === 0 ? (\r\n          <div key={i} className=\"cell\">\r\n            {hoursAndMinutes} - {endHoursAndMinutes}\r\n          </div>\r\n        ) : (\r\n          <div key={i} className=\"cell\">\r\n            &nbsp;\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Template;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,QAAQ,EAAEC,UAAU,EAAEC,YAAY,QAAQ,eAAe;AAClE,OAAO,gBAAgB;AACvB,SAASC,OAAO,QAAQ,qBAAqB;AAAC;AAQ9C,MAAMC,QAAyB,GAAG,QAAmC;EAAA;EAAA,IAAlC;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAW,CAAC;EAC9D,MAAMC,IAAI,GAAGH,IAAI,GAAGC,OAAO;EAC3B,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAW,EAAE,CAAC;EAE9C,MAAMY,IAAI,GAAG,IAAIC,IAAI,CAAC,4BAA4B,CAAC;EACnD,MAAMC,OAAO,GAAG,IAAID,IAAI,CAAC,4BAA4B,CAAC;EACtD,IAAIE,eAAe,GAAGH,IAAI,CAACI,QAAQ,EAAE,GAAG,GAAG,GAAGJ,IAAI,CAACK,UAAU,EAAE;EAC/D,IAAIC,kBAAkB,GAAGJ,OAAO,CAACE,QAAQ,EAAE,GAAG,GAAG,GAAGF,OAAO,CAACG,UAAU,EAAE;;EAExE;EACA;EACA;;EAEAlB,SAAS,CAAC,MAAM;IACdK,OAAO,EAAE,CAACe,IAAI,CAAEC,MAAM,IAAK;MACzBT,OAAO,CACLS,MAAM,CACHC,IAAI,EAAE,CACNC,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACC,IAAI,EAAE,CAAC,CACpC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAENf,IAAI,CAACgB,OAAO,CAACF,OAAO,IAAI;IACtBG,OAAO,CAACC,GAAG,CAACJ,OAAO,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC,CAAC;EAEF,oBACE;IAAK,SAAS,EAAC,UAAU;IAAA,UACtB,CAAC,GAAGC,KAAK,CAACrB,IAAI,CAAC,CAAC,CAACc,GAAG,CAAC,CAACQ,CAAC,EAAEC,CAAC,KAAK;MAC9B,IAAIA,CAAC,GAAGzB,OAAO,EAAE;QACf,oBACE;UAAa,SAAS,EAAC,MAAM;UAAA,UAC1BC,UAAU,CAACwB,CAAC;QAAC,GADNA,CAAC;UAAA;UAAA;UAAA;QAAA,QAEL;MAEV;MAEA,IAAKA,CAAC,GAAGzB,OAAO,GAAI,CAAC,KAAK,CAAC,EAAE;QAC3BQ,eAAe,GAAGb,UAAU,CAACU,IAAI,CAAC;QAClCG,eAAe,GAAGZ,YAAY,CAACY,eAAe,CAAC;QAC/CG,kBAAkB,GAAGhB,UAAU,CAACY,OAAO,CAAC;QACxCI,kBAAkB,GAAGf,YAAY,CAACe,kBAAkB,CAAC;MACvD,CAAC,MAAM,IAAIc,CAAC,GAAGzB,OAAO,KAAK,CAAC,EAAE;QAC5BQ,eAAe,GAAGd,QAAQ,CAACW,IAAI,CAAC;QAChCG,eAAe,GAAGZ,YAAY,CAACY,eAAe,CAAC;QAC/CG,kBAAkB,GAAGhB,UAAU,CAACY,OAAO,CAAC;QACxCI,kBAAkB,GAAGf,YAAY,CAACe,kBAAkB,CAAC;MACvD;MAEA,OAAOc,CAAC,GAAGzB,OAAO,KAAK,CAAC,gBACtB;QAAa,SAAS,EAAC,MAAM;QAAA,WAC1BQ,eAAe,SAAKG,kBAAkB;MAAA,GAD/Bc,CAAC;QAAA;QAAA;QAAA;MAAA,QAEL,gBAEN;QAAa,SAAS,EAAC,MAAM;QAAA;MAAA,GAAnBA,CAAC;QAAA;QAAA;QAAA;MAAA,QAGZ;IACH,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,GA/DI3B,QAAyB;AAAA,KAAzBA,QAAyB;AAiE/B,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module"}