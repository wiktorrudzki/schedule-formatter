{"ast":null,"code":"import * as DomUtils from \"domutils\";\nimport boolbase from \"boolbase\";\nimport { compile as compileRaw, compileUnsafe, compileToken } from \"./compile.js\";\nimport { getNextSiblings } from \"./pseudo-selectors/subselects.js\";\nconst defaultEquals = (a, b) => a === b;\nconst defaultOptions = {\n  adapter: DomUtils,\n  equals: defaultEquals\n};\nfunction convertOptionFormats(options) {\n  var _a, _b, _c, _d;\n  /*\n   * We force one format of options to the other one.\n   */\n  // @ts-expect-error Default options may have incompatible `Node` / `ElementNode`.\n  const opts = options !== null && options !== void 0 ? options : defaultOptions;\n  // @ts-expect-error Same as above.\n  (_a = opts.adapter) !== null && _a !== void 0 ? _a : opts.adapter = DomUtils;\n  // @ts-expect-error `equals` does not exist on `Options`\n  (_b = opts.equals) !== null && _b !== void 0 ? _b : opts.equals = (_d = (_c = opts.adapter) === null || _c === void 0 ? void 0 : _c.equals) !== null && _d !== void 0 ? _d : defaultEquals;\n  return opts;\n}\nfunction wrapCompile(func) {\n  return function addAdapter(selector, options, context) {\n    const opts = convertOptionFormats(options);\n    return func(selector, opts, context);\n  };\n}\n/**\n * Compiles the query, returns a function.\n */\nexport const compile = wrapCompile(compileRaw);\nexport const _compileUnsafe = wrapCompile(compileUnsafe);\nexport const _compileToken = wrapCompile(compileToken);\nfunction getSelectorFunc(searchFunc) {\n  return function select(query, elements, options) {\n    const opts = convertOptionFormats(options);\n    if (typeof query !== \"function\") {\n      query = compileUnsafe(query, opts, elements);\n    }\n    const filteredElements = prepareContext(elements, opts.adapter, query.shouldTestNextSiblings);\n    return searchFunc(query, filteredElements, opts);\n  };\n}\nexport function prepareContext(elems, adapter) {\n  let shouldTestNextSiblings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  /*\n   * Add siblings if the query requires them.\n   * See https://github.com/fb55/css-select/pull/43#issuecomment-225414692\n   */\n  if (shouldTestNextSiblings) {\n    elems = appendNextSiblings(elems, adapter);\n  }\n  return Array.isArray(elems) ? adapter.removeSubsets(elems) : adapter.getChildren(elems);\n}\nfunction appendNextSiblings(elem, adapter) {\n  // Order matters because jQuery seems to check the children before the siblings\n  const elems = Array.isArray(elem) ? elem.slice(0) : [elem];\n  const elemsLength = elems.length;\n  for (let i = 0; i < elemsLength; i++) {\n    const nextSiblings = getNextSiblings(elems[i], adapter);\n    elems.push(...nextSiblings);\n  }\n  return elems;\n}\n/**\n * @template Node The generic Node type for the DOM adapter being used.\n * @template ElementNode The Node type for elements for the DOM adapter being used.\n * @param elems Elements to query. If it is an element, its children will be queried..\n * @param query can be either a CSS selector string or a compiled query function.\n * @param [options] options for querying the document.\n * @see compile for supported selector queries.\n * @returns All matching elements.\n *\n */\nexport const selectAll = getSelectorFunc((query, elems, options) => query === boolbase.falseFunc || !elems || elems.length === 0 ? [] : options.adapter.findAll(query, elems));\n/**\n * @template Node The generic Node type for the DOM adapter being used.\n * @template ElementNode The Node type for elements for the DOM adapter being used.\n * @param elems Elements to query. If it is an element, its children will be queried..\n * @param query can be either a CSS selector string or a compiled query function.\n * @param [options] options for querying the document.\n * @see compile for supported selector queries.\n * @returns the first match, or null if there was no match.\n */\nexport const selectOne = getSelectorFunc((query, elems, options) => query === boolbase.falseFunc || !elems || elems.length === 0 ? null : options.adapter.findOne(query, elems));\n/**\n * Tests whether or not an element is matched by query.\n *\n * @template Node The generic Node type for the DOM adapter being used.\n * @template ElementNode The Node type for elements for the DOM adapter being used.\n * @param elem The element to test if it matches the query.\n * @param query can be either a CSS selector string or a compiled query function.\n * @param [options] options for querying the document.\n * @see compile for supported selector queries.\n * @returns\n */\nexport function is(elem, query, options) {\n  const opts = convertOptionFormats(options);\n  return (typeof query === \"function\" ? query : compileRaw(query, opts))(elem);\n}\n/**\n * Alias for selectAll(query, elems, options).\n * @see [compile] for supported selector queries.\n */\nexport default selectAll;\n// Export filters, pseudos and aliases to allow users to supply their own.\n/** @deprecated Use the `pseudos` option instead. */\nexport { filters, pseudos, aliases } from \"./pseudo-selectors/index.js\";","map":{"version":3,"mappings":"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","names":["DomUtils","boolbase","compile","compileRaw","compileUnsafe","compileToken","getNextSiblings","defaultEquals","a","b","defaultOptions","adapter","equals","convertOptionFormats","options","opts","wrapCompile","func","addAdapter","selector","context","_compileUnsafe","_compileToken","getSelectorFunc","searchFunc","select","query","elements","filteredElements","prepareContext","shouldTestNextSiblings","elems","appendNextSiblings","Array","isArray","removeSubsets","getChildren","elem","slice","elemsLength","length","i","nextSiblings","push","selectAll","falseFunc","findAll","selectOne","findOne","is","filters","pseudos","aliases"],"sources":["index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}