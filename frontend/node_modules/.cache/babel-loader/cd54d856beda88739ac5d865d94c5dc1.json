{"ast":null,"code":"import { default as defaultOptions, flatten as flattenOptions } from './options.js';\nimport * as staticMethods from './static.js';\nimport { Cheerio } from './cheerio.js';\nimport { isHtml, isCheerio } from './utils.js';\nexport function getLoad(parse, render) {\n  /**\n   * Create a querying function, bound to a document created from the provided markup.\n   *\n   * Note that similar to web browser contexts, this operation may introduce\n   * `<html>`, `<head>`, and `<body>` elements; set `isDocument` to `false` to\n   * switch to fragment mode and disable this.\n   *\n   * @param content - Markup to be loaded.\n   * @param options - Options for the created instance.\n   * @param isDocument - Allows parser to be switched to fragment mode.\n   * @returns The loaded document.\n   * @see {@link https://cheerio.js.org#loading} for additional usage information.\n   */\n  return function load(content, options) {\n    let isDocument = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (content == null) {\n      throw new Error('cheerio.load() expects a string');\n    }\n    const internalOpts = {\n      ...defaultOptions,\n      ...flattenOptions(options)\n    };\n    const initialRoot = parse(content, internalOpts, isDocument, null);\n    /** Create an extended class here, so that extensions only live on one instance. */\n    class LoadedCheerio extends Cheerio {\n      _make(selector, context) {\n        const cheerio = initialize(selector, context);\n        cheerio.prevObject = this;\n        return cheerio;\n      }\n      _parse(content, options, isDocument, context) {\n        return parse(content, options, isDocument, context);\n      }\n      _render(dom) {\n        return render(dom, this.options);\n      }\n    }\n    function initialize(selector, context) {\n      let root = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : initialRoot;\n      let opts = arguments.length > 3 ? arguments[3] : undefined;\n      // $($)\n      if (selector && isCheerio(selector)) return selector;\n      const options = {\n        ...internalOpts,\n        ...flattenOptions(opts)\n      };\n      const r = typeof root === 'string' ? [parse(root, options, false, null)] : 'length' in root ? root : [root];\n      const rootInstance = isCheerio(r) ? r : new LoadedCheerio(r, null, options);\n      // Add a cyclic reference, so that calling methods on `_root` never fails.\n      rootInstance._root = rootInstance;\n      // $(), $(null), $(undefined), $(false)\n      if (!selector) {\n        return new LoadedCheerio(undefined, rootInstance, options);\n      }\n      const elements = typeof selector === 'string' && isHtml(selector) ?\n      // $(<html>)\n      parse(selector, options, false, null).children : isNode(selector) ?\n      // $(dom)\n      [selector] : Array.isArray(selector) ?\n      // $([dom])\n      selector : undefined;\n      const instance = new LoadedCheerio(elements, rootInstance, options);\n      if (elements) {\n        return instance;\n      }\n      if (typeof selector !== 'string') {\n        throw new Error('Unexpected type of selector');\n      }\n      // We know that our selector is a string now.\n      let search = selector;\n      const searchContext = !context ?\n      // If we don't have a context, maybe we have a root, from loading\n      rootInstance : typeof context === 'string' ? isHtml(context) ?\n      // $('li', '<ul>...</ul>')\n      new LoadedCheerio([parse(context, options, false, null)], rootInstance, options) : (\n      // $('li', 'ul')\n      search = `${context} ${search}`, rootInstance) : isCheerio(context) ?\n      // $('li', $)\n      context :\n      // $('li', node), $('li', [nodes])\n      new LoadedCheerio(Array.isArray(context) ? context : [context], rootInstance, options);\n      // If we still don't have a context, return\n      if (!searchContext) return instance;\n      /*\n       * #id, .class, tag\n       */\n      return searchContext.find(search);\n    }\n    // Add in static methods & properties\n    Object.assign(initialize, staticMethods, {\n      load,\n      // `_root` and `_options` are used in static methods.\n      _root: initialRoot,\n      _options: internalOpts,\n      // Add `fn` for plugins\n      fn: LoadedCheerio.prototype,\n      // Add the prototype here to maintain `instanceof` behavior.\n      prototype: LoadedCheerio.prototype\n    });\n    return initialize;\n  };\n}\nfunction isNode(obj) {\n  return !!obj.name || obj.type === 'root' || obj.type === 'text' || obj.type === 'comment';\n}","map":{"version":3,"mappings":"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","names":["default","defaultOptions","flatten","flattenOptions","staticMethods","Cheerio","isHtml","isCheerio","getLoad","parse","render","load","content","options","isDocument","Error","internalOpts","initialRoot","LoadedCheerio","_make","selector","context","cheerio","initialize","prevObject","_parse","_render","dom","root","opts","r","rootInstance","_root","undefined","elements","children","isNode","Array","isArray","instance","search","searchContext","find","Object","assign","_options","fn","prototype","obj","name","type"],"sources":["load.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}