{"ast":null,"code":"import _classCallCheck from \"C:/programowanko/react/schedule-formatter/schedule-formatter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/programowanko/react/schedule-formatter/schedule-formatter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n//Const\nvar NOAH_ARK_CAPACITY = 3;\nexport var EntryType;\n(function (EntryType) {\n  EntryType[EntryType[\"Marker\"] = 0] = \"Marker\";\n  EntryType[EntryType[\"Element\"] = 1] = \"Element\";\n})(EntryType = EntryType || (EntryType = {}));\nvar MARKER = {\n  type: EntryType.Marker\n};\n//List of formatting elements\nexport var FormattingElementList = /*#__PURE__*/function () {\n  function FormattingElementList(treeAdapter) {\n    _classCallCheck(this, FormattingElementList);\n    this.treeAdapter = treeAdapter;\n    this.entries = [];\n    this.bookmark = null;\n  }\n  //Noah Ark's condition\n  //OPTIMIZATION: at first we try to find possible candidates for exclusion using\n  //lightweight heuristics without thorough attributes check.\n  _createClass(FormattingElementList, [{\n    key: \"_getNoahArkConditionCandidates\",\n    value: function _getNoahArkConditionCandidates(newElement, neAttrs) {\n      var candidates = [];\n      var neAttrsLength = neAttrs.length;\n      var neTagName = this.treeAdapter.getTagName(newElement);\n      var neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);\n      for (var i = 0; i < this.entries.length; i++) {\n        var entry = this.entries[i];\n        if (entry.type === EntryType.Marker) {\n          break;\n        }\n        var element = entry.element;\n        if (this.treeAdapter.getTagName(element) === neTagName && this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {\n          var elementAttrs = this.treeAdapter.getAttrList(element);\n          if (elementAttrs.length === neAttrsLength) {\n            candidates.push({\n              idx: i,\n              attrs: elementAttrs\n            });\n          }\n        }\n      }\n      return candidates;\n    }\n  }, {\n    key: \"_ensureNoahArkCondition\",\n    value: function _ensureNoahArkCondition(newElement) {\n      if (this.entries.length < NOAH_ARK_CAPACITY) return;\n      var neAttrs = this.treeAdapter.getAttrList(newElement);\n      var candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);\n      if (candidates.length < NOAH_ARK_CAPACITY) return;\n      //NOTE: build attrs map for the new element, so we can perform fast lookups\n      var neAttrsMap = new Map(neAttrs.map(function (neAttr) {\n        return [neAttr.name, neAttr.value];\n      }));\n      var validCandidates = 0;\n      //NOTE: remove bottommost candidates, until Noah's Ark condition will not be met\n      for (var i = 0; i < candidates.length; i++) {\n        var candidate = candidates[i];\n        // We know that `candidate.attrs.length === neAttrs.length`\n        if (candidate.attrs.every(function (cAttr) {\n          return neAttrsMap.get(cAttr.name) === cAttr.value;\n        })) {\n          validCandidates += 1;\n          if (validCandidates >= NOAH_ARK_CAPACITY) {\n            this.entries.splice(candidate.idx, 1);\n          }\n        }\n      }\n    }\n    //Mutations\n  }, {\n    key: \"insertMarker\",\n    value: function insertMarker() {\n      this.entries.unshift(MARKER);\n    }\n  }, {\n    key: \"pushElement\",\n    value: function pushElement(element, token) {\n      this._ensureNoahArkCondition(element);\n      this.entries.unshift({\n        type: EntryType.Element,\n        element: element,\n        token: token\n      });\n    }\n  }, {\n    key: \"insertElementAfterBookmark\",\n    value: function insertElementAfterBookmark(element, token) {\n      var bookmarkIdx = this.entries.indexOf(this.bookmark);\n      this.entries.splice(bookmarkIdx, 0, {\n        type: EntryType.Element,\n        element: element,\n        token: token\n      });\n    }\n  }, {\n    key: \"removeEntry\",\n    value: function removeEntry(entry) {\n      var entryIndex = this.entries.indexOf(entry);\n      if (entryIndex >= 0) {\n        this.entries.splice(entryIndex, 1);\n      }\n    }\n    /**\n     * Clears the list of formatting elements up to the last marker.\n     *\n     * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker\n     */\n  }, {\n    key: \"clearToLastMarker\",\n    value: function clearToLastMarker() {\n      var markerIdx = this.entries.indexOf(MARKER);\n      if (markerIdx >= 0) {\n        this.entries.splice(0, markerIdx + 1);\n      } else {\n        this.entries.length = 0;\n      }\n    }\n    //Search\n  }, {\n    key: \"getElementEntryInScopeWithTagName\",\n    value: function getElementEntryInScopeWithTagName(tagName) {\n      var _this = this;\n      var entry = this.entries.find(function (entry) {\n        return entry.type === EntryType.Marker || _this.treeAdapter.getTagName(entry.element) === tagName;\n      });\n      return entry && entry.type === EntryType.Element ? entry : null;\n    }\n  }, {\n    key: \"getElementEntry\",\n    value: function getElementEntry(element) {\n      return this.entries.find(function (entry) {\n        return entry.type === EntryType.Element && entry.element === element;\n      });\n    }\n  }]);\n  return FormattingElementList;\n}();","map":{"version":3,"names":["NOAH_ARK_CAPACITY","EntryType","MARKER","type","Marker","FormattingElementList","treeAdapter","entries","bookmark","newElement","neAttrs","candidates","neAttrsLength","length","neTagName","getTagName","neNamespaceURI","getNamespaceURI","i","entry","element","elementAttrs","getAttrList","push","idx","attrs","_getNoahArkConditionCandidates","neAttrsMap","Map","map","neAttr","name","value","validCandidates","candidate","every","cAttr","get","splice","unshift","token","_ensureNoahArkCondition","Element","bookmarkIdx","indexOf","entryIndex","markerIdx","tagName","find"],"sources":["C:/programowanko/react/schedule-formatter/schedule-formatter/node_modules/cheerio/node_modules/parse5/dist/parser/formatting-element-list.js"],"sourcesContent":["//Const\nconst NOAH_ARK_CAPACITY = 3;\nexport var EntryType;\n(function (EntryType) {\n    EntryType[EntryType[\"Marker\"] = 0] = \"Marker\";\n    EntryType[EntryType[\"Element\"] = 1] = \"Element\";\n})(EntryType = EntryType || (EntryType = {}));\nconst MARKER = { type: EntryType.Marker };\n//List of formatting elements\nexport class FormattingElementList {\n    constructor(treeAdapter) {\n        this.treeAdapter = treeAdapter;\n        this.entries = [];\n        this.bookmark = null;\n    }\n    //Noah Ark's condition\n    //OPTIMIZATION: at first we try to find possible candidates for exclusion using\n    //lightweight heuristics without thorough attributes check.\n    _getNoahArkConditionCandidates(newElement, neAttrs) {\n        const candidates = [];\n        const neAttrsLength = neAttrs.length;\n        const neTagName = this.treeAdapter.getTagName(newElement);\n        const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);\n        for (let i = 0; i < this.entries.length; i++) {\n            const entry = this.entries[i];\n            if (entry.type === EntryType.Marker) {\n                break;\n            }\n            const { element } = entry;\n            if (this.treeAdapter.getTagName(element) === neTagName &&\n                this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {\n                const elementAttrs = this.treeAdapter.getAttrList(element);\n                if (elementAttrs.length === neAttrsLength) {\n                    candidates.push({ idx: i, attrs: elementAttrs });\n                }\n            }\n        }\n        return candidates;\n    }\n    _ensureNoahArkCondition(newElement) {\n        if (this.entries.length < NOAH_ARK_CAPACITY)\n            return;\n        const neAttrs = this.treeAdapter.getAttrList(newElement);\n        const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);\n        if (candidates.length < NOAH_ARK_CAPACITY)\n            return;\n        //NOTE: build attrs map for the new element, so we can perform fast lookups\n        const neAttrsMap = new Map(neAttrs.map((neAttr) => [neAttr.name, neAttr.value]));\n        let validCandidates = 0;\n        //NOTE: remove bottommost candidates, until Noah's Ark condition will not be met\n        for (let i = 0; i < candidates.length; i++) {\n            const candidate = candidates[i];\n            // We know that `candidate.attrs.length === neAttrs.length`\n            if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {\n                validCandidates += 1;\n                if (validCandidates >= NOAH_ARK_CAPACITY) {\n                    this.entries.splice(candidate.idx, 1);\n                }\n            }\n        }\n    }\n    //Mutations\n    insertMarker() {\n        this.entries.unshift(MARKER);\n    }\n    pushElement(element, token) {\n        this._ensureNoahArkCondition(element);\n        this.entries.unshift({\n            type: EntryType.Element,\n            element,\n            token,\n        });\n    }\n    insertElementAfterBookmark(element, token) {\n        const bookmarkIdx = this.entries.indexOf(this.bookmark);\n        this.entries.splice(bookmarkIdx, 0, {\n            type: EntryType.Element,\n            element,\n            token,\n        });\n    }\n    removeEntry(entry) {\n        const entryIndex = this.entries.indexOf(entry);\n        if (entryIndex >= 0) {\n            this.entries.splice(entryIndex, 1);\n        }\n    }\n    /**\n     * Clears the list of formatting elements up to the last marker.\n     *\n     * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker\n     */\n    clearToLastMarker() {\n        const markerIdx = this.entries.indexOf(MARKER);\n        if (markerIdx >= 0) {\n            this.entries.splice(0, markerIdx + 1);\n        }\n        else {\n            this.entries.length = 0;\n        }\n    }\n    //Search\n    getElementEntryInScopeWithTagName(tagName) {\n        const entry = this.entries.find((entry) => entry.type === EntryType.Marker || this.treeAdapter.getTagName(entry.element) === tagName);\n        return entry && entry.type === EntryType.Element ? entry : null;\n    }\n    getElementEntry(element) {\n        return this.entries.find((entry) => entry.type === EntryType.Element && entry.element === element);\n    }\n}\n//# sourceMappingURL=formatting-element-list.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module"}