{"ast":null,"code":"import _objectSpread from \"C:/programowanko/react/schedule-formatter/schedule-formatter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { DOCUMENT_MODE } from '../common/html.js';\nfunction createTextNode(value) {\n  return {\n    nodeName: '#text',\n    value: value,\n    parentNode: null\n  };\n}\nexport var defaultTreeAdapter = {\n  //Node construction\n  createDocument: function createDocument() {\n    return {\n      nodeName: '#document',\n      mode: DOCUMENT_MODE.NO_QUIRKS,\n      childNodes: []\n    };\n  },\n  createDocumentFragment: function createDocumentFragment() {\n    return {\n      nodeName: '#document-fragment',\n      childNodes: []\n    };\n  },\n  createElement: function createElement(tagName, namespaceURI, attrs) {\n    return {\n      nodeName: tagName,\n      tagName: tagName,\n      attrs: attrs,\n      namespaceURI: namespaceURI,\n      childNodes: [],\n      parentNode: null\n    };\n  },\n  createCommentNode: function createCommentNode(data) {\n    return {\n      nodeName: '#comment',\n      data: data,\n      parentNode: null\n    };\n  },\n  //Tree mutation\n  appendChild: function appendChild(parentNode, newNode) {\n    parentNode.childNodes.push(newNode);\n    newNode.parentNode = parentNode;\n  },\n  insertBefore: function insertBefore(parentNode, newNode, referenceNode) {\n    var insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n    parentNode.childNodes.splice(insertionIdx, 0, newNode);\n    newNode.parentNode = parentNode;\n  },\n  setTemplateContent: function setTemplateContent(templateElement, contentElement) {\n    templateElement.content = contentElement;\n  },\n  getTemplateContent: function getTemplateContent(templateElement) {\n    return templateElement.content;\n  },\n  setDocumentType: function setDocumentType(document, name, publicId, systemId) {\n    var doctypeNode = document.childNodes.find(function (node) {\n      return node.nodeName === '#documentType';\n    });\n    if (doctypeNode) {\n      doctypeNode.name = name;\n      doctypeNode.publicId = publicId;\n      doctypeNode.systemId = systemId;\n    } else {\n      var node = {\n        nodeName: '#documentType',\n        name: name,\n        publicId: publicId,\n        systemId: systemId,\n        parentNode: null\n      };\n      defaultTreeAdapter.appendChild(document, node);\n    }\n  },\n  setDocumentMode: function setDocumentMode(document, mode) {\n    document.mode = mode;\n  },\n  getDocumentMode: function getDocumentMode(document) {\n    return document.mode;\n  },\n  detachNode: function detachNode(node) {\n    if (node.parentNode) {\n      var idx = node.parentNode.childNodes.indexOf(node);\n      node.parentNode.childNodes.splice(idx, 1);\n      node.parentNode = null;\n    }\n  },\n  insertText: function insertText(parentNode, text) {\n    if (parentNode.childNodes.length > 0) {\n      var prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n      if (defaultTreeAdapter.isTextNode(prevNode)) {\n        prevNode.value += text;\n        return;\n      }\n    }\n    defaultTreeAdapter.appendChild(parentNode, createTextNode(text));\n  },\n  insertTextBefore: function insertTextBefore(parentNode, text, referenceNode) {\n    var prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n    if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {\n      prevNode.value += text;\n    } else {\n      defaultTreeAdapter.insertBefore(parentNode, createTextNode(text), referenceNode);\n    }\n  },\n  adoptAttributes: function adoptAttributes(recipient, attrs) {\n    var recipientAttrsMap = new Set(recipient.attrs.map(function (attr) {\n      return attr.name;\n    }));\n    for (var j = 0; j < attrs.length; j++) {\n      if (!recipientAttrsMap.has(attrs[j].name)) {\n        recipient.attrs.push(attrs[j]);\n      }\n    }\n  },\n  //Tree traversing\n  getFirstChild: function getFirstChild(node) {\n    return node.childNodes[0];\n  },\n  getChildNodes: function getChildNodes(node) {\n    return node.childNodes;\n  },\n  getParentNode: function getParentNode(node) {\n    return node.parentNode;\n  },\n  getAttrList: function getAttrList(element) {\n    return element.attrs;\n  },\n  //Node data\n  getTagName: function getTagName(element) {\n    return element.tagName;\n  },\n  getNamespaceURI: function getNamespaceURI(element) {\n    return element.namespaceURI;\n  },\n  getTextNodeContent: function getTextNodeContent(textNode) {\n    return textNode.value;\n  },\n  getCommentNodeContent: function getCommentNodeContent(commentNode) {\n    return commentNode.data;\n  },\n  getDocumentTypeNodeName: function getDocumentTypeNodeName(doctypeNode) {\n    return doctypeNode.name;\n  },\n  getDocumentTypeNodePublicId: function getDocumentTypeNodePublicId(doctypeNode) {\n    return doctypeNode.publicId;\n  },\n  getDocumentTypeNodeSystemId: function getDocumentTypeNodeSystemId(doctypeNode) {\n    return doctypeNode.systemId;\n  },\n  //Node types\n  isTextNode: function isTextNode(node) {\n    return node.nodeName === '#text';\n  },\n  isCommentNode: function isCommentNode(node) {\n    return node.nodeName === '#comment';\n  },\n  isDocumentTypeNode: function isDocumentTypeNode(node) {\n    return node.nodeName === '#documentType';\n  },\n  isElementNode: function isElementNode(node) {\n    return Object.prototype.hasOwnProperty.call(node, 'tagName');\n  },\n  // Source code location\n  setNodeSourceCodeLocation: function setNodeSourceCodeLocation(node, location) {\n    node.sourceCodeLocation = location;\n  },\n  getNodeSourceCodeLocation: function getNodeSourceCodeLocation(node) {\n    return node.sourceCodeLocation;\n  },\n  updateNodeSourceCodeLocation: function updateNodeSourceCodeLocation(node, endLocation) {\n    node.sourceCodeLocation = _objectSpread(_objectSpread({}, node.sourceCodeLocation), endLocation);\n  }\n};","map":{"version":3,"names":["DOCUMENT_MODE","createTextNode","value","nodeName","parentNode","defaultTreeAdapter","createDocument","mode","NO_QUIRKS","childNodes","createDocumentFragment","createElement","tagName","namespaceURI","attrs","createCommentNode","data","appendChild","newNode","push","insertBefore","referenceNode","insertionIdx","indexOf","splice","setTemplateContent","templateElement","contentElement","content","getTemplateContent","setDocumentType","document","name","publicId","systemId","doctypeNode","find","node","setDocumentMode","getDocumentMode","detachNode","idx","insertText","text","length","prevNode","isTextNode","insertTextBefore","adoptAttributes","recipient","recipientAttrsMap","Set","map","attr","j","has","getFirstChild","getChildNodes","getParentNode","getAttrList","element","getTagName","getNamespaceURI","getTextNodeContent","textNode","getCommentNodeContent","commentNode","getDocumentTypeNodeName","getDocumentTypeNodePublicId","getDocumentTypeNodeSystemId","isCommentNode","isDocumentTypeNode","isElementNode","Object","prototype","hasOwnProperty","call","setNodeSourceCodeLocation","location","sourceCodeLocation","getNodeSourceCodeLocation","updateNodeSourceCodeLocation","endLocation"],"sources":["C:/programowanko/react/schedule-formatter/schedule-formatter/node_modules/parse5-htmlparser2-tree-adapter/node_modules/parse5/dist/tree-adapters/default.js"],"sourcesContent":["import { DOCUMENT_MODE } from '../common/html.js';\nfunction createTextNode(value) {\n    return {\n        nodeName: '#text',\n        value,\n        parentNode: null,\n    };\n}\nexport const defaultTreeAdapter = {\n    //Node construction\n    createDocument() {\n        return {\n            nodeName: '#document',\n            mode: DOCUMENT_MODE.NO_QUIRKS,\n            childNodes: [],\n        };\n    },\n    createDocumentFragment() {\n        return {\n            nodeName: '#document-fragment',\n            childNodes: [],\n        };\n    },\n    createElement(tagName, namespaceURI, attrs) {\n        return {\n            nodeName: tagName,\n            tagName,\n            attrs,\n            namespaceURI,\n            childNodes: [],\n            parentNode: null,\n        };\n    },\n    createCommentNode(data) {\n        return {\n            nodeName: '#comment',\n            data,\n            parentNode: null,\n        };\n    },\n    //Tree mutation\n    appendChild(parentNode, newNode) {\n        parentNode.childNodes.push(newNode);\n        newNode.parentNode = parentNode;\n    },\n    insertBefore(parentNode, newNode, referenceNode) {\n        const insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n        parentNode.childNodes.splice(insertionIdx, 0, newNode);\n        newNode.parentNode = parentNode;\n    },\n    setTemplateContent(templateElement, contentElement) {\n        templateElement.content = contentElement;\n    },\n    getTemplateContent(templateElement) {\n        return templateElement.content;\n    },\n    setDocumentType(document, name, publicId, systemId) {\n        const doctypeNode = document.childNodes.find((node) => node.nodeName === '#documentType');\n        if (doctypeNode) {\n            doctypeNode.name = name;\n            doctypeNode.publicId = publicId;\n            doctypeNode.systemId = systemId;\n        }\n        else {\n            const node = {\n                nodeName: '#documentType',\n                name,\n                publicId,\n                systemId,\n                parentNode: null,\n            };\n            defaultTreeAdapter.appendChild(document, node);\n        }\n    },\n    setDocumentMode(document, mode) {\n        document.mode = mode;\n    },\n    getDocumentMode(document) {\n        return document.mode;\n    },\n    detachNode(node) {\n        if (node.parentNode) {\n            const idx = node.parentNode.childNodes.indexOf(node);\n            node.parentNode.childNodes.splice(idx, 1);\n            node.parentNode = null;\n        }\n    },\n    insertText(parentNode, text) {\n        if (parentNode.childNodes.length > 0) {\n            const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n            if (defaultTreeAdapter.isTextNode(prevNode)) {\n                prevNode.value += text;\n                return;\n            }\n        }\n        defaultTreeAdapter.appendChild(parentNode, createTextNode(text));\n    },\n    insertTextBefore(parentNode, text, referenceNode) {\n        const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n        if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {\n            prevNode.value += text;\n        }\n        else {\n            defaultTreeAdapter.insertBefore(parentNode, createTextNode(text), referenceNode);\n        }\n    },\n    adoptAttributes(recipient, attrs) {\n        const recipientAttrsMap = new Set(recipient.attrs.map((attr) => attr.name));\n        for (let j = 0; j < attrs.length; j++) {\n            if (!recipientAttrsMap.has(attrs[j].name)) {\n                recipient.attrs.push(attrs[j]);\n            }\n        }\n    },\n    //Tree traversing\n    getFirstChild(node) {\n        return node.childNodes[0];\n    },\n    getChildNodes(node) {\n        return node.childNodes;\n    },\n    getParentNode(node) {\n        return node.parentNode;\n    },\n    getAttrList(element) {\n        return element.attrs;\n    },\n    //Node data\n    getTagName(element) {\n        return element.tagName;\n    },\n    getNamespaceURI(element) {\n        return element.namespaceURI;\n    },\n    getTextNodeContent(textNode) {\n        return textNode.value;\n    },\n    getCommentNodeContent(commentNode) {\n        return commentNode.data;\n    },\n    getDocumentTypeNodeName(doctypeNode) {\n        return doctypeNode.name;\n    },\n    getDocumentTypeNodePublicId(doctypeNode) {\n        return doctypeNode.publicId;\n    },\n    getDocumentTypeNodeSystemId(doctypeNode) {\n        return doctypeNode.systemId;\n    },\n    //Node types\n    isTextNode(node) {\n        return node.nodeName === '#text';\n    },\n    isCommentNode(node) {\n        return node.nodeName === '#comment';\n    },\n    isDocumentTypeNode(node) {\n        return node.nodeName === '#documentType';\n    },\n    isElementNode(node) {\n        return Object.prototype.hasOwnProperty.call(node, 'tagName');\n    },\n    // Source code location\n    setNodeSourceCodeLocation(node, location) {\n        node.sourceCodeLocation = location;\n    },\n    getNodeSourceCodeLocation(node) {\n        return node.sourceCodeLocation;\n    },\n    updateNodeSourceCodeLocation(node, endLocation) {\n        node.sourceCodeLocation = { ...node.sourceCodeLocation, ...endLocation };\n    },\n};\n//# sourceMappingURL=default.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module"}