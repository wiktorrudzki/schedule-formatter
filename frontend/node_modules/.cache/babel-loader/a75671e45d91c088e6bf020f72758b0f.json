{"ast":null,"code":"import { Parser } from \"./Parser.js\";\nexport { Parser };\nimport { DomHandler } from \"domhandler\";\nexport { DomHandler };\n// Helper methods\n/**\n * Parses the data, returns the resulting document.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n */\nexport function parseDocument(data, options) {\n  const handler = new DomHandler(undefined, options);\n  new Parser(handler, options).end(data);\n  return handler.root;\n}\n/**\n * Parses data, returns an array of the root nodes.\n *\n * Note that the root nodes still have a `Document` node as their parent.\n * Use `parseDocument` to get the `Document` node instead.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n * @deprecated Use `parseDocument` instead.\n */\nexport function parseDOM(data, options) {\n  return parseDocument(data, options).children;\n}\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param cb A callback that will be called once parsing has been completed.\n * @param options Optional options for the parser and DOM builder.\n * @param elementCb An optional callback that will be called every time a tag has been completed inside of the DOM.\n */\nexport function createDomStream(cb, options, elementCb) {\n  const handler = new DomHandler(cb, options, elementCb);\n  return new Parser(handler, options);\n}\nexport { default as Tokenizer } from \"./Tokenizer.js\";\n/*\n * All of the following exports exist for backwards-compatibility.\n * They should probably be removed eventually.\n */\nimport * as ElementType from \"domelementtype\";\nexport { ElementType };\nimport { getFeed } from \"domutils\";\nexport { getFeed };\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.\n */\nexport function parseFeed(feed) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    xmlMode: true\n  };\n  return getFeed(parseDOM(feed, options));\n}\nimport * as _DomUtils from \"domutils\";\nexport { _DomUtils as DomUtils }; // Old name for DomHandler\nexport { DomHandler as DefaultHandler };","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAuB,aAAa;AACnD,SAASA,MAAM;AAEf,SACIC,UAAU,QAKP,YAAY;AAEnB,SAASA,UAAU;AAInB;AAEA;;;;;;AAMA,OAAM,SAAUC,aAAa,CAACC,IAAY,EAAEC,OAAiB;EACzD,MAAMC,OAAO,GAAG,IAAIJ,UAAU,CAACK,SAAS,EAAEF,OAAO,CAAC;EAClD,IAAIJ,MAAM,CAACK,OAAO,EAAED,OAAO,CAAC,CAACG,GAAG,CAACJ,IAAI,CAAC;EACtC,OAAOE,OAAO,CAACG,IAAI;AACvB;AACA;;;;;;;;;;AAUA,OAAM,SAAUC,QAAQ,CAACN,IAAY,EAAEC,OAAiB;EACpD,OAAOF,aAAa,CAACC,IAAI,EAAEC,OAAO,CAAC,CAACM,QAAQ;AAChD;AACA;;;;;;;AAOA,OAAM,SAAUC,eAAe,CAC3BC,EAAmD,EACnDR,OAAiB,EACjBS,SAAsC;EAEtC,MAAMR,OAAO,GAAG,IAAIJ,UAAU,CAACW,EAAE,EAAER,OAAO,EAAES,SAAS,CAAC;EACtD,OAAO,IAAIb,MAAM,CAACK,OAAO,EAAED,OAAO,CAAC;AACvC;AAEA,SACIU,OAAO,IAAIC,SAAS,QAEjB,gBAAgB;AAEvB;;;;AAIA,OAAO,KAAKC,WAAW,MAAM,gBAAgB;AAC7C,SAASA,WAAW;AAEpB,SAASC,OAAO,QAAc,UAAU;AAExC,SAASA,OAAO;AAEhB;;;;;;AAMA,OAAM,SAAUC,SAAS,CACrBC,IAAY,EACkD;EAAA,IAA9Df,8EAA6C;IAAEgB,OAAO,EAAE;EAAI,CAAE;EAE9D,OAAOH,OAAO,CAACR,QAAQ,CAACU,IAAI,EAAEf,OAAO,CAAC,CAAC;AAC3C;AAAC,2BAEyB,UAAU;AAAA,sBAAxBiB,QAAQ,IAEpB;AACA,SAASpB,UAAU,IAAIqB,cAAc","names":["Parser","DomHandler","parseDocument","data","options","handler","undefined","end","root","parseDOM","children","createDomStream","cb","elementCb","default","Tokenizer","ElementType","getFeed","parseFeed","feed","xmlMode","DomUtils","DefaultHandler"],"sources":["index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}