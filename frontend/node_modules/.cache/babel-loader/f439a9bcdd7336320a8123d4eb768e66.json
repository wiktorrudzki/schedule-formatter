{"ast":null,"code":"var _jsxFileName = \"C:\\\\programowanko\\\\react\\\\schedule-formatter\\\\schedule-formatter\\\\src\\\\components\\\\template\\\\index.tsx\";\nimport { addHours, addMinutes, addRemaining } from \"./createCells\";\nimport \"./template.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Template = _ref => {\n  let {\n    rows,\n    columns,\n    daysOfWeek\n  } = _ref;\n  const grid = rows * columns;\n  const date = new Date(\"December 14, 2026 06:30:00\");\n  const endDate = new Date(\"December 14, 2026 07:15:00\");\n  let hoursAndMinutes = date.getHours() + \":\" + date.getMinutes();\n  let endHoursAndMinutes = endDate.getHours() + \":\" + endDate.getMinutes();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"template\",\n    children: [...Array(grid)].map((e, i) => {\n      if (i < columns) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell\",\n          children: daysOfWeek[i]\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }, this);\n      }\n      if (i % columns * 2 === 0) {\n        hoursAndMinutes = addMinutes(date);\n        hoursAndMinutes = addRemaining(hoursAndMinutes);\n        endHoursAndMinutes = addMinutes(endDate);\n        endHoursAndMinutes = addRemaining(endHoursAndMinutes);\n      } else if (i % columns === 0) {\n        hoursAndMinutes = addHours(date);\n        hoursAndMinutes = addRemaining(hoursAndMinutes);\n        endHoursAndMinutes = addMinutes(endDate);\n        endHoursAndMinutes = addRemaining(endHoursAndMinutes);\n      }\n      return i % columns === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell\",\n        children: [hoursAndMinutes, \" - \", endHoursAndMinutes]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_c = Template;\nexport default Template;\nvar _c;\n$RefreshReg$(_c, \"Template\");","map":{"version":3,"names":["addHours","addMinutes","addRemaining","Template","rows","columns","daysOfWeek","grid","date","Date","endDate","hoursAndMinutes","getHours","getMinutes","endHoursAndMinutes","Array","map","e","i"],"sources":["C:/programowanko/react/schedule-formatter/schedule-formatter/src/components/template/index.tsx"],"sourcesContent":["import { addHours, addMinutes, addRemaining } from \"./createCells\";\r\nimport \"./template.css\";\r\n\r\ntype Props = {\r\n  rows: number;\r\n  columns: number;\r\n  daysOfWeek: string[];\r\n};\r\n\r\nconst Template: React.FC<Props> = ({ rows, columns, daysOfWeek }) => {\r\n  const grid = rows * columns;\r\n\r\n  const date = new Date(\"December 14, 2026 06:30:00\");\r\n  const endDate = new Date(\"December 14, 2026 07:15:00\")\r\n  let hoursAndMinutes = date.getHours() + \":\" + date.getMinutes();\r\n  let endHoursAndMinutes = endDate.getHours() + \":\" + endDate.getMinutes();\r\n\r\n  return (\r\n    <div className=\"template\">\r\n      {[...Array(grid)].map((e, i) => {\r\n        if (i < columns) {\r\n          return (\r\n            <div key={i} className=\"cell\">\r\n              {daysOfWeek[i]}\r\n            </div>\r\n          );\r\n        }\r\n\r\n        if ((i % columns) * 2 === 0) {\r\n          hoursAndMinutes = addMinutes(date);\r\n          hoursAndMinutes = addRemaining(hoursAndMinutes);\r\n          endHoursAndMinutes = addMinutes(endDate);\r\n          endHoursAndMinutes = addRemaining(endHoursAndMinutes);\r\n        } else if (i % columns === 0) {\r\n          hoursAndMinutes = addHours(date);\r\n          hoursAndMinutes = addRemaining(hoursAndMinutes);\r\n          endHoursAndMinutes = addMinutes(endDate);\r\n          endHoursAndMinutes = addRemaining(endHoursAndMinutes);\r\n        }\r\n\r\n        return i % columns === 0 ? (\r\n          <div key={i} className=\"cell\">\r\n            {hoursAndMinutes} - {endHoursAndMinutes}\r\n          </div>\r\n        ) : (\r\n          <div key={i} className=\"cell\"></div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Template;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,UAAU,EAAEC,YAAY,QAAQ,eAAe;AAClE,OAAO,gBAAgB;AAAC;AAQxB,MAAMC,QAAyB,GAAG,QAAmC;EAAA,IAAlC;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAW,CAAC;EAC9D,MAAMC,IAAI,GAAGH,IAAI,GAAGC,OAAO;EAE3B,MAAMG,IAAI,GAAG,IAAIC,IAAI,CAAC,4BAA4B,CAAC;EACnD,MAAMC,OAAO,GAAG,IAAID,IAAI,CAAC,4BAA4B,CAAC;EACtD,IAAIE,eAAe,GAAGH,IAAI,CAACI,QAAQ,EAAE,GAAG,GAAG,GAAGJ,IAAI,CAACK,UAAU,EAAE;EAC/D,IAAIC,kBAAkB,GAAGJ,OAAO,CAACE,QAAQ,EAAE,GAAG,GAAG,GAAGF,OAAO,CAACG,UAAU,EAAE;EAExE,oBACE;IAAK,SAAS,EAAC,UAAU;IAAA,UACtB,CAAC,GAAGE,KAAK,CAACR,IAAI,CAAC,CAAC,CAACS,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC9B,IAAIA,CAAC,GAAGb,OAAO,EAAE;QACf,oBACE;UAAa,SAAS,EAAC,MAAM;UAAA,UAC1BC,UAAU,CAACY,CAAC;QAAC,GADNA,CAAC;UAAA;UAAA;UAAA;QAAA,QAEL;MAEV;MAEA,IAAKA,CAAC,GAAGb,OAAO,GAAI,CAAC,KAAK,CAAC,EAAE;QAC3BM,eAAe,GAAGV,UAAU,CAACO,IAAI,CAAC;QAClCG,eAAe,GAAGT,YAAY,CAACS,eAAe,CAAC;QAC/CG,kBAAkB,GAAGb,UAAU,CAACS,OAAO,CAAC;QACxCI,kBAAkB,GAAGZ,YAAY,CAACY,kBAAkB,CAAC;MACvD,CAAC,MAAM,IAAII,CAAC,GAAGb,OAAO,KAAK,CAAC,EAAE;QAC5BM,eAAe,GAAGX,QAAQ,CAACQ,IAAI,CAAC;QAChCG,eAAe,GAAGT,YAAY,CAACS,eAAe,CAAC;QAC/CG,kBAAkB,GAAGb,UAAU,CAACS,OAAO,CAAC;QACxCI,kBAAkB,GAAGZ,YAAY,CAACY,kBAAkB,CAAC;MACvD;MAEA,OAAOI,CAAC,GAAGb,OAAO,KAAK,CAAC,gBACtB;QAAa,SAAS,EAAC,MAAM;QAAA,WAC1BM,eAAe,SAAKG,kBAAkB;MAAA,GAD/BI,CAAC;QAAA;QAAA;QAAA;MAAA,QAEL,gBAEN;QAAa,SAAS,EAAC;MAAM,GAAnBA,CAAC;QAAA;QAAA;QAAA;MAAA,QACZ;IACH,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,KAzCIf,QAAyB;AA2C/B,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module"}