{"ast":null,"code":"import { isDocument } from 'domhandler';\nimport { parse as parseDocument, parseFragment, serializeOuter } from 'parse5';\nimport { adapter as htmlparser2Adapter } from 'parse5-htmlparser2-tree-adapter';\n/**\n * Parse the content with `parse5` in the context of the given `ParentNode`.\n *\n * @param content - The content to parse.\n * @param options - A set of options to use to parse.\n * @param isDocument - Whether to parse the content as a full HTML document.\n * @param context - The context in which to parse the content.\n * @returns The parsed content.\n */\nexport function parseWithParse5(content, options, isDocument, context) {\n  const opts = {\n    scriptingEnabled: typeof options.scriptingEnabled === 'boolean' ? options.scriptingEnabled : true,\n    treeAdapter: htmlparser2Adapter,\n    sourceCodeLocationInfo: options.sourceCodeLocationInfo\n  };\n  return isDocument ? parseDocument(content, opts) : parseFragment(context, content, opts);\n}\nconst renderOpts = {\n  treeAdapter: htmlparser2Adapter\n};\n/**\n * Renders the given DOM tree with `parse5` and returns the result as a string.\n *\n * @param dom - The DOM tree to render.\n * @returns The rendered document.\n */\nexport function renderWithParse5(dom) {\n  /*\n   * `dom-serializer` passes over the special \"root\" node and renders the\n   * node's children in its place. To mimic this behavior with `parse5`, an\n   * equivalent operation must be applied to the input array.\n   */\n  const nodes = 'length' in dom ? dom : [dom];\n  for (let index = 0; index < nodes.length; index += 1) {\n    const node = nodes[index];\n    if (isDocument(node)) {\n      Array.prototype.splice.call(nodes, index, 1, ...node.children);\n    }\n  }\n  let result = '';\n  for (let index = 0; index < nodes.length; index += 1) {\n    const node = nodes[index];\n    result += serializeOuter(node, renderOpts);\n  }\n  return result;\n}","map":{"version":3,"mappings":"AAAA,SAA4BA,UAAU,QAAoB,YAAY;AACtE,SAASC,KAAK,IAAIC,aAAa,EAAEC,aAAa,EAAEC,cAAc,QAAQ,QAAQ;AAC9E,SAASC,OAAO,IAAIC,kBAAkB,QAAQ,iCAAiC;AAG/E;;;;;;;;;AASA,OAAM,SAAUC,eAAe,CAC7BC,OAAe,EACfC,OAAwB,EACxBT,UAAmB,EACnBU,OAA0B;EAE1B,MAAMC,IAAI,GAAG;IACXC,gBAAgB,EACd,OAAOH,OAAO,CAACG,gBAAgB,KAAK,SAAS,GACzCH,OAAO,CAACG,gBAAgB,GACxB,IAAI;IACVC,WAAW,EAAEP,kBAAkB;IAC/BQ,sBAAsB,EAAEL,OAAO,CAACK;GACjC;EAED,OAAOd,UAAU,GACbE,aAAa,CAACM,OAAO,EAAEG,IAAI,CAAC,GAC5BR,aAAa,CAACO,OAAO,EAAEF,OAAO,EAAEG,IAAI,CAAC;AAC3C;AAEA,MAAMI,UAAU,GAAG;EAAEF,WAAW,EAAEP;AAAkB,CAAE;AAEtD;;;;;;AAMA,OAAM,SAAUU,gBAAgB,CAACC,GAAiC;EAChE;;;;;EAKA,MAAMC,KAAK,GAAG,QAAQ,IAAID,GAAG,GAAGA,GAAG,GAAG,CAACA,GAAG,CAAC;EAC3C,KAAK,IAAIE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,CAACE,MAAM,EAAED,KAAK,IAAI,CAAC,EAAE;IACpD,MAAME,IAAI,GAAGH,KAAK,CAACC,KAAK,CAAC;IACzB,IAAInB,UAAU,CAACqB,IAAI,CAAC,EAAE;MACpBC,KAAK,CAACC,SAAS,CAACC,MAAM,CAACC,IAAI,CAACP,KAAK,EAAEC,KAAK,EAAE,CAAC,EAAE,GAAGE,IAAI,CAACK,QAAQ,CAAC;;;EAIlE,IAAIC,MAAM,GAAG,EAAE;EACf,KAAK,IAAIR,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,CAACE,MAAM,EAAED,KAAK,IAAI,CAAC,EAAE;IACpD,MAAME,IAAI,GAAGH,KAAK,CAACC,KAAK,CAAC;IACzBQ,MAAM,IAAIvB,cAAc,CAACiB,IAAI,EAAEN,UAAU,CAAC;;EAG5C,OAAOY,MAAM;AACf","names":["isDocument","parse","parseDocument","parseFragment","serializeOuter","adapter","htmlparser2Adapter","parseWithParse5","content","options","context","opts","scriptingEnabled","treeAdapter","sourceCodeLocationInfo","renderOpts","renderWithParse5","dom","nodes","index","length","node","Array","prototype","splice","call","children","result"],"sources":["parsers/parse5-adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}