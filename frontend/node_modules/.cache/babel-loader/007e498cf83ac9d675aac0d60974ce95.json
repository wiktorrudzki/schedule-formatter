{"ast":null,"code":"import _classCallCheck from \"C:/programowanko/react/schedule-formatter/schedule-formatter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/programowanko/react/schedule-formatter/schedule-formatter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Preprocessor } from './preprocessor.js';\nimport { CODE_POINTS as $, SEQUENCES as $$, REPLACEMENT_CHARACTER, isSurrogate, isUndefinedCodePoint, isControlCodePoint } from '../common/unicode.js';\nimport { TokenType, getTokenAttr } from '../common/token.js';\nimport { htmlDecodeTree, BinTrieFlags, determineBranch } from 'entities/lib/decode.js';\nimport { ERR } from '../common/error-codes.js';\nimport { TAG_ID, getTagID } from '../common/html.js';\n//C1 Unicode control character reference replacements\nvar C1_CONTROLS_REFERENCE_REPLACEMENTS = new Map([[0x80, 8364], [0x82, 8218], [0x83, 402], [0x84, 8222], [0x85, 8230], [0x86, 8224], [0x87, 8225], [0x88, 710], [0x89, 8240], [0x8a, 352], [0x8b, 8249], [0x8c, 338], [0x8e, 381], [0x91, 8216], [0x92, 8217], [0x93, 8220], [0x94, 8221], [0x95, 8226], [0x96, 8211], [0x97, 8212], [0x98, 732], [0x99, 8482], [0x9a, 353], [0x9b, 8250], [0x9c, 339], [0x9e, 382], [0x9f, 376]]);\n//States\nvar State;\n(function (State) {\n  State[State[\"DATA\"] = 0] = \"DATA\";\n  State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n  State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n  State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n  State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n  State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n  State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n  State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n  State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n  State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n  State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n  State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n  State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n  State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n  State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n  State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n  State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n  State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n  State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n  State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n  State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n  State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n  State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n  State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n  State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n  State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n  State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n  State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n  State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n  State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n  State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n  State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n  State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n  State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n  State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n  State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n  State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n  State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n  State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n  State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n  State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n  State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n  State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n  State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n  State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n  State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n  State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n  State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n  State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n  State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n  State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n  State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n  State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n  State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n  State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n  State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n  State[State[\"NAMED_CHARACTER_REFERENCE\"] = 72] = \"NAMED_CHARACTER_REFERENCE\";\n  State[State[\"AMBIGUOUS_AMPERSAND\"] = 73] = \"AMBIGUOUS_AMPERSAND\";\n  State[State[\"NUMERIC_CHARACTER_REFERENCE\"] = 74] = \"NUMERIC_CHARACTER_REFERENCE\";\n  State[State[\"HEXADEMICAL_CHARACTER_REFERENCE_START\"] = 75] = \"HEXADEMICAL_CHARACTER_REFERENCE_START\";\n  State[State[\"HEXADEMICAL_CHARACTER_REFERENCE\"] = 76] = \"HEXADEMICAL_CHARACTER_REFERENCE\";\n  State[State[\"DECIMAL_CHARACTER_REFERENCE\"] = 77] = \"DECIMAL_CHARACTER_REFERENCE\";\n  State[State[\"NUMERIC_CHARACTER_REFERENCE_END\"] = 78] = \"NUMERIC_CHARACTER_REFERENCE_END\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexport var TokenizerMode = {\n  DATA: State.DATA,\n  RCDATA: State.RCDATA,\n  RAWTEXT: State.RAWTEXT,\n  SCRIPT_DATA: State.SCRIPT_DATA,\n  PLAINTEXT: State.PLAINTEXT,\n  CDATA_SECTION: State.CDATA_SECTION\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n  return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n  return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n  return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction isAsciiUpperHexDigit(cp) {\n  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\nfunction isAsciiHexDigit(cp) {\n  return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\nfunction toAsciiLower(cp) {\n  return cp + 32;\n}\nfunction isWhitespace(cp) {\n  return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n  return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n  return isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN;\n}\n//Tokenizer\nexport var Tokenizer = /*#__PURE__*/function () {\n  function Tokenizer(options, handler) {\n    _classCallCheck(this, Tokenizer);\n    this.options = options;\n    this.handler = handler;\n    this.paused = false;\n    /** Ensures that the parsing loop isn't run multiple times at once. */\n    this.inLoop = false;\n    /**\n     * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n     * and that it is not an integration point for either MathML or HTML.\n     *\n     * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n     */\n    this.inForeignNode = false;\n    this.lastStartTagName = '';\n    this.active = false;\n    this.state = State.DATA;\n    this.returnState = State.DATA;\n    this.charRefCode = -1;\n    this.consumedAfterSnapshot = -1;\n    this.currentCharacterToken = null;\n    this.currentToken = null;\n    this.currentAttr = {\n      name: '',\n      value: ''\n    };\n    this.preprocessor = new Preprocessor(handler);\n    this.currentLocation = this.getCurrentLocation(-1);\n  }\n  //Errors\n  _createClass(Tokenizer, [{\n    key: \"_err\",\n    value: function _err(code) {\n      var _a, _b;\n      (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code));\n    }\n    // NOTE: `offset` may never run across line boundaries.\n  }, {\n    key: \"getCurrentLocation\",\n    value: function getCurrentLocation(offset) {\n      if (!this.options.sourceCodeLocationInfo) {\n        return null;\n      }\n      return {\n        startLine: this.preprocessor.line,\n        startCol: this.preprocessor.col - offset,\n        startOffset: this.preprocessor.offset - offset,\n        endLine: -1,\n        endCol: -1,\n        endOffset: -1\n      };\n    }\n  }, {\n    key: \"_runParsingLoop\",\n    value: function _runParsingLoop() {\n      if (this.inLoop) return;\n      this.inLoop = true;\n      while (this.active && !this.paused) {\n        this.consumedAfterSnapshot = 0;\n        var cp = this._consume();\n        if (!this._ensureHibernation()) {\n          this._callState(cp);\n        }\n      }\n      this.inLoop = false;\n    }\n    //API\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.paused = true;\n    }\n  }, {\n    key: \"resume\",\n    value: function resume(writeCallback) {\n      if (!this.paused) {\n        throw new Error('Parser was already resumed');\n      }\n      this.paused = false;\n      // Necessary for synchronous resume.\n      if (this.inLoop) return;\n      this._runParsingLoop();\n      if (!this.paused) {\n        writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n      }\n    }\n  }, {\n    key: \"write\",\n    value: function write(chunk, isLastChunk, writeCallback) {\n      this.active = true;\n      this.preprocessor.write(chunk, isLastChunk);\n      this._runParsingLoop();\n      if (!this.paused) {\n        writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n      }\n    }\n  }, {\n    key: \"insertHtmlAtCurrentPos\",\n    value: function insertHtmlAtCurrentPos(chunk) {\n      this.active = true;\n      this.preprocessor.insertHtmlAtCurrentPos(chunk);\n      this._runParsingLoop();\n    }\n    //Hibernation\n  }, {\n    key: \"_ensureHibernation\",\n    value: function _ensureHibernation() {\n      if (this.preprocessor.endOfChunkHit) {\n        this._unconsume(this.consumedAfterSnapshot);\n        this.active = false;\n        return true;\n      }\n      return false;\n    }\n    //Consumption\n  }, {\n    key: \"_consume\",\n    value: function _consume() {\n      this.consumedAfterSnapshot++;\n      return this.preprocessor.advance();\n    }\n  }, {\n    key: \"_unconsume\",\n    value: function _unconsume(count) {\n      this.consumedAfterSnapshot -= count;\n      this.preprocessor.retreat(count);\n    }\n  }, {\n    key: \"_reconsumeInState\",\n    value: function _reconsumeInState(state, cp) {\n      this.state = state;\n      this._callState(cp);\n    }\n  }, {\n    key: \"_advanceBy\",\n    value: function _advanceBy(count) {\n      this.consumedAfterSnapshot += count;\n      for (var i = 0; i < count; i++) {\n        this.preprocessor.advance();\n      }\n    }\n  }, {\n    key: \"_consumeSequenceIfMatch\",\n    value: function _consumeSequenceIfMatch(pattern, caseSensitive) {\n      if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n        // We will already have consumed one character before calling this method.\n        this._advanceBy(pattern.length - 1);\n        return true;\n      }\n      return false;\n    }\n    //Token creation\n  }, {\n    key: \"_createStartTagToken\",\n    value: function _createStartTagToken() {\n      this.currentToken = {\n        type: TokenType.START_TAG,\n        tagName: '',\n        tagID: TAG_ID.UNKNOWN,\n        selfClosing: false,\n        ackSelfClosing: false,\n        attrs: [],\n        location: this.getCurrentLocation(1)\n      };\n    }\n  }, {\n    key: \"_createEndTagToken\",\n    value: function _createEndTagToken() {\n      this.currentToken = {\n        type: TokenType.END_TAG,\n        tagName: '',\n        tagID: TAG_ID.UNKNOWN,\n        selfClosing: false,\n        ackSelfClosing: false,\n        attrs: [],\n        location: this.getCurrentLocation(2)\n      };\n    }\n  }, {\n    key: \"_createCommentToken\",\n    value: function _createCommentToken(offset) {\n      this.currentToken = {\n        type: TokenType.COMMENT,\n        data: '',\n        location: this.getCurrentLocation(offset)\n      };\n    }\n  }, {\n    key: \"_createDoctypeToken\",\n    value: function _createDoctypeToken(initialName) {\n      this.currentToken = {\n        type: TokenType.DOCTYPE,\n        name: initialName,\n        forceQuirks: false,\n        publicId: null,\n        systemId: null,\n        location: this.currentLocation\n      };\n    }\n  }, {\n    key: \"_createCharacterToken\",\n    value: function _createCharacterToken(type, chars) {\n      this.currentCharacterToken = {\n        type: type,\n        chars: chars,\n        location: this.currentLocation\n      };\n    }\n    //Tag attributes\n  }, {\n    key: \"_createAttr\",\n    value: function _createAttr(attrNameFirstCh) {\n      this.currentAttr = {\n        name: attrNameFirstCh,\n        value: ''\n      };\n      this.currentLocation = this.getCurrentLocation(0);\n    }\n  }, {\n    key: \"_leaveAttrName\",\n    value: function _leaveAttrName() {\n      var _a;\n      var _b;\n      var token = this.currentToken;\n      if (getTokenAttr(token, this.currentAttr.name) === null) {\n        token.attrs.push(this.currentAttr);\n        if (token.location && this.currentLocation) {\n          var attrLocations = (_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : _b.attrs = Object.create(null);\n          attrLocations[this.currentAttr.name] = this.currentLocation;\n          // Set end location\n          this._leaveAttrValue();\n        }\n      } else {\n        this._err(ERR.duplicateAttribute);\n      }\n    }\n  }, {\n    key: \"_leaveAttrValue\",\n    value: function _leaveAttrValue() {\n      if (this.currentLocation) {\n        this.currentLocation.endLine = this.preprocessor.line;\n        this.currentLocation.endCol = this.preprocessor.col;\n        this.currentLocation.endOffset = this.preprocessor.offset;\n      }\n    }\n    //Token emission\n  }, {\n    key: \"prepareToken\",\n    value: function prepareToken(ct) {\n      this._emitCurrentCharacterToken(ct.location);\n      this.currentToken = null;\n      if (ct.location) {\n        ct.location.endLine = this.preprocessor.line;\n        ct.location.endCol = this.preprocessor.col + 1;\n        ct.location.endOffset = this.preprocessor.offset + 1;\n      }\n      this.currentLocation = this.getCurrentLocation(-1);\n    }\n  }, {\n    key: \"emitCurrentTagToken\",\n    value: function emitCurrentTagToken() {\n      var ct = this.currentToken;\n      this.prepareToken(ct);\n      ct.tagID = getTagID(ct.tagName);\n      if (ct.type === TokenType.START_TAG) {\n        this.lastStartTagName = ct.tagName;\n        this.handler.onStartTag(ct);\n      } else {\n        if (ct.attrs.length > 0) {\n          this._err(ERR.endTagWithAttributes);\n        }\n        if (ct.selfClosing) {\n          this._err(ERR.endTagWithTrailingSolidus);\n        }\n        this.handler.onEndTag(ct);\n      }\n      this.preprocessor.dropParsedChunk();\n    }\n  }, {\n    key: \"emitCurrentComment\",\n    value: function emitCurrentComment(ct) {\n      this.prepareToken(ct);\n      this.handler.onComment(ct);\n      this.preprocessor.dropParsedChunk();\n    }\n  }, {\n    key: \"emitCurrentDoctype\",\n    value: function emitCurrentDoctype(ct) {\n      this.prepareToken(ct);\n      this.handler.onDoctype(ct);\n      this.preprocessor.dropParsedChunk();\n    }\n  }, {\n    key: \"_emitCurrentCharacterToken\",\n    value: function _emitCurrentCharacterToken(nextLocation) {\n      if (this.currentCharacterToken) {\n        //NOTE: if we have a pending character token, make it's end location equal to the\n        //current token's start location.\n        if (nextLocation && this.currentCharacterToken.location) {\n          this.currentCharacterToken.location.endLine = nextLocation.startLine;\n          this.currentCharacterToken.location.endCol = nextLocation.startCol;\n          this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n        }\n        switch (this.currentCharacterToken.type) {\n          case TokenType.CHARACTER:\n            {\n              this.handler.onCharacter(this.currentCharacterToken);\n              break;\n            }\n          case TokenType.NULL_CHARACTER:\n            {\n              this.handler.onNullCharacter(this.currentCharacterToken);\n              break;\n            }\n          case TokenType.WHITESPACE_CHARACTER:\n            {\n              this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n              break;\n            }\n        }\n        this.currentCharacterToken = null;\n      }\n    }\n  }, {\n    key: \"_emitEOFToken\",\n    value: function _emitEOFToken() {\n      var location = this.getCurrentLocation(0);\n      if (location) {\n        location.endLine = location.startLine;\n        location.endCol = location.startCol;\n        location.endOffset = location.startOffset;\n      }\n      this._emitCurrentCharacterToken(location);\n      this.handler.onEof({\n        type: TokenType.EOF,\n        location: location\n      });\n      this.active = false;\n    }\n    //Characters emission\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, the parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n  }, {\n    key: \"_appendCharToCurrentCharacterToken\",\n    value: function _appendCharToCurrentCharacterToken(type, ch) {\n      if (this.currentCharacterToken) {\n        if (this.currentCharacterToken.type !== type) {\n          this.currentLocation = this.getCurrentLocation(0);\n          this._emitCurrentCharacterToken(this.currentLocation);\n          this.preprocessor.dropParsedChunk();\n        } else {\n          this.currentCharacterToken.chars += ch;\n          return;\n        }\n      }\n      this._createCharacterToken(type, ch);\n    }\n  }, {\n    key: \"_emitCodePoint\",\n    value: function _emitCodePoint(cp) {\n      var type = isWhitespace(cp) ? TokenType.WHITESPACE_CHARACTER : cp === $.NULL ? TokenType.NULL_CHARACTER : TokenType.CHARACTER;\n      this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n    }\n    //NOTE: used when we emit characters explicitly.\n    //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n  }, {\n    key: \"_emitChars\",\n    value: function _emitChars(ch) {\n      this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);\n    }\n    // Character reference helpers\n  }, {\n    key: \"_matchNamedCharacterReference\",\n    value: function _matchNamedCharacterReference(cp) {\n      var result = null;\n      var excess = 0;\n      var withoutSemicolon = false;\n      for (var i = 0, current = htmlDecodeTree[0]; i >= 0; cp = this._consume()) {\n        i = determineBranch(htmlDecodeTree, current, i + 1, cp);\n        if (i < 0) break;\n        excess += 1;\n        current = htmlDecodeTree[i];\n        var masked = current & BinTrieFlags.VALUE_LENGTH;\n        // If the branch is a value, store it and continue\n        if (masked) {\n          // The mask is the number of bytes of the value, including the current byte.\n          var valueLength = (masked >> 14) - 1;\n          // Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n          // See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n          if (cp !== $.SEMICOLON && this._isCharacterReferenceInAttribute() && isEntityInAttributeInvalidEnd(this.preprocessor.peek(1))) {\n            //NOTE: we don't flush all consumed code points here, and instead switch back to the original state after\n            //emitting an ampersand. This is fine, as alphanumeric characters won't be parsed differently in attributes.\n            result = [$.AMPERSAND];\n            // Skip over the value.\n            i += valueLength;\n          } else {\n            // If this is a surrogate pair, consume the next two bytes.\n            result = valueLength === 0 ? [htmlDecodeTree[i] & ~BinTrieFlags.VALUE_LENGTH] : valueLength === 1 ? [htmlDecodeTree[++i]] : [htmlDecodeTree[++i], htmlDecodeTree[++i]];\n            excess = 0;\n            withoutSemicolon = cp !== $.SEMICOLON;\n          }\n          if (valueLength === 0) {\n            // If the value is zero-length, we're done.\n            this._consume();\n            break;\n          }\n        }\n      }\n      this._unconsume(excess);\n      if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {\n        this._err(ERR.missingSemicolonAfterCharacterReference);\n      }\n      // We want to emit the error above on the code point after the entity.\n      // We always consume one code point too many in the loop, and we wait to\n      // unconsume it until after the error is emitted.\n      this._unconsume(1);\n      return result;\n    }\n  }, {\n    key: \"_isCharacterReferenceInAttribute\",\n    value: function _isCharacterReferenceInAttribute() {\n      return this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED;\n    }\n  }, {\n    key: \"_flushCodePointConsumedAsCharacterReference\",\n    value: function _flushCodePointConsumedAsCharacterReference(cp) {\n      if (this._isCharacterReferenceInAttribute()) {\n        this.currentAttr.value += String.fromCodePoint(cp);\n      } else {\n        this._emitCodePoint(cp);\n      }\n    }\n    // Calling states this way turns out to be much faster than any other approach.\n  }, {\n    key: \"_callState\",\n    value: function _callState(cp) {\n      switch (this.state) {\n        case State.DATA:\n          {\n            this._stateData(cp);\n            break;\n          }\n        case State.RCDATA:\n          {\n            this._stateRcdata(cp);\n            break;\n          }\n        case State.RAWTEXT:\n          {\n            this._stateRawtext(cp);\n            break;\n          }\n        case State.SCRIPT_DATA:\n          {\n            this._stateScriptData(cp);\n            break;\n          }\n        case State.PLAINTEXT:\n          {\n            this._statePlaintext(cp);\n            break;\n          }\n        case State.TAG_OPEN:\n          {\n            this._stateTagOpen(cp);\n            break;\n          }\n        case State.END_TAG_OPEN:\n          {\n            this._stateEndTagOpen(cp);\n            break;\n          }\n        case State.TAG_NAME:\n          {\n            this._stateTagName(cp);\n            break;\n          }\n        case State.RCDATA_LESS_THAN_SIGN:\n          {\n            this._stateRcdataLessThanSign(cp);\n            break;\n          }\n        case State.RCDATA_END_TAG_OPEN:\n          {\n            this._stateRcdataEndTagOpen(cp);\n            break;\n          }\n        case State.RCDATA_END_TAG_NAME:\n          {\n            this._stateRcdataEndTagName(cp);\n            break;\n          }\n        case State.RAWTEXT_LESS_THAN_SIGN:\n          {\n            this._stateRawtextLessThanSign(cp);\n            break;\n          }\n        case State.RAWTEXT_END_TAG_OPEN:\n          {\n            this._stateRawtextEndTagOpen(cp);\n            break;\n          }\n        case State.RAWTEXT_END_TAG_NAME:\n          {\n            this._stateRawtextEndTagName(cp);\n            break;\n          }\n        case State.SCRIPT_DATA_LESS_THAN_SIGN:\n          {\n            this._stateScriptDataLessThanSign(cp);\n            break;\n          }\n        case State.SCRIPT_DATA_END_TAG_OPEN:\n          {\n            this._stateScriptDataEndTagOpen(cp);\n            break;\n          }\n        case State.SCRIPT_DATA_END_TAG_NAME:\n          {\n            this._stateScriptDataEndTagName(cp);\n            break;\n          }\n        case State.SCRIPT_DATA_ESCAPE_START:\n          {\n            this._stateScriptDataEscapeStart(cp);\n            break;\n          }\n        case State.SCRIPT_DATA_ESCAPE_START_DASH:\n          {\n            this._stateScriptDataEscapeStartDash(cp);\n            break;\n          }\n        case State.SCRIPT_DATA_ESCAPED:\n          {\n            this._stateScriptDataEscaped(cp);\n            break;\n          }\n        case State.SCRIPT_DATA_ESCAPED_DASH:\n          {\n            this._stateScriptDataEscapedDash(cp);\n            break;\n          }\n        case State.SCRIPT_DATA_ESCAPED_DASH_DASH:\n          {\n            this._stateScriptDataEscapedDashDash(cp);\n            break;\n          }\n        case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN:\n          {\n            this._stateScriptDataEscapedLessThanSign(cp);\n            break;\n          }\n        case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:\n          {\n            this._stateScriptDataEscapedEndTagOpen(cp);\n            break;\n          }\n        case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME:\n          {\n            this._stateScriptDataEscapedEndTagName(cp);\n            break;\n          }\n        case State.SCRIPT_DATA_DOUBLE_ESCAPE_START:\n          {\n            this._stateScriptDataDoubleEscapeStart(cp);\n            break;\n          }\n        case State.SCRIPT_DATA_DOUBLE_ESCAPED:\n          {\n            this._stateScriptDataDoubleEscaped(cp);\n            break;\n          }\n        case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH:\n          {\n            this._stateScriptDataDoubleEscapedDash(cp);\n            break;\n          }\n        case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH:\n          {\n            this._stateScriptDataDoubleEscapedDashDash(cp);\n            break;\n          }\n        case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN:\n          {\n            this._stateScriptDataDoubleEscapedLessThanSign(cp);\n            break;\n          }\n        case State.SCRIPT_DATA_DOUBLE_ESCAPE_END:\n          {\n            this._stateScriptDataDoubleEscapeEnd(cp);\n            break;\n          }\n        case State.BEFORE_ATTRIBUTE_NAME:\n          {\n            this._stateBeforeAttributeName(cp);\n            break;\n          }\n        case State.ATTRIBUTE_NAME:\n          {\n            this._stateAttributeName(cp);\n            break;\n          }\n        case State.AFTER_ATTRIBUTE_NAME:\n          {\n            this._stateAfterAttributeName(cp);\n            break;\n          }\n        case State.BEFORE_ATTRIBUTE_VALUE:\n          {\n            this._stateBeforeAttributeValue(cp);\n            break;\n          }\n        case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED:\n          {\n            this._stateAttributeValueDoubleQuoted(cp);\n            break;\n          }\n        case State.ATTRIBUTE_VALUE_SINGLE_QUOTED:\n          {\n            this._stateAttributeValueSingleQuoted(cp);\n            break;\n          }\n        case State.ATTRIBUTE_VALUE_UNQUOTED:\n          {\n            this._stateAttributeValueUnquoted(cp);\n            break;\n          }\n        case State.AFTER_ATTRIBUTE_VALUE_QUOTED:\n          {\n            this._stateAfterAttributeValueQuoted(cp);\n            break;\n          }\n        case State.SELF_CLOSING_START_TAG:\n          {\n            this._stateSelfClosingStartTag(cp);\n            break;\n          }\n        case State.BOGUS_COMMENT:\n          {\n            this._stateBogusComment(cp);\n            break;\n          }\n        case State.MARKUP_DECLARATION_OPEN:\n          {\n            this._stateMarkupDeclarationOpen(cp);\n            break;\n          }\n        case State.COMMENT_START:\n          {\n            this._stateCommentStart(cp);\n            break;\n          }\n        case State.COMMENT_START_DASH:\n          {\n            this._stateCommentStartDash(cp);\n            break;\n          }\n        case State.COMMENT:\n          {\n            this._stateComment(cp);\n            break;\n          }\n        case State.COMMENT_LESS_THAN_SIGN:\n          {\n            this._stateCommentLessThanSign(cp);\n            break;\n          }\n        case State.COMMENT_LESS_THAN_SIGN_BANG:\n          {\n            this._stateCommentLessThanSignBang(cp);\n            break;\n          }\n        case State.COMMENT_LESS_THAN_SIGN_BANG_DASH:\n          {\n            this._stateCommentLessThanSignBangDash(cp);\n            break;\n          }\n        case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:\n          {\n            this._stateCommentLessThanSignBangDashDash(cp);\n            break;\n          }\n        case State.COMMENT_END_DASH:\n          {\n            this._stateCommentEndDash(cp);\n            break;\n          }\n        case State.COMMENT_END:\n          {\n            this._stateCommentEnd(cp);\n            break;\n          }\n        case State.COMMENT_END_BANG:\n          {\n            this._stateCommentEndBang(cp);\n            break;\n          }\n        case State.DOCTYPE:\n          {\n            this._stateDoctype(cp);\n            break;\n          }\n        case State.BEFORE_DOCTYPE_NAME:\n          {\n            this._stateBeforeDoctypeName(cp);\n            break;\n          }\n        case State.DOCTYPE_NAME:\n          {\n            this._stateDoctypeName(cp);\n            break;\n          }\n        case State.AFTER_DOCTYPE_NAME:\n          {\n            this._stateAfterDoctypeName(cp);\n            break;\n          }\n        case State.AFTER_DOCTYPE_PUBLIC_KEYWORD:\n          {\n            this._stateAfterDoctypePublicKeyword(cp);\n            break;\n          }\n        case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER:\n          {\n            this._stateBeforeDoctypePublicIdentifier(cp);\n            break;\n          }\n        case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED:\n          {\n            this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n            break;\n          }\n        case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED:\n          {\n            this._stateDoctypePublicIdentifierSingleQuoted(cp);\n            break;\n          }\n        case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER:\n          {\n            this._stateAfterDoctypePublicIdentifier(cp);\n            break;\n          }\n        case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS:\n          {\n            this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n            break;\n          }\n        case State.AFTER_DOCTYPE_SYSTEM_KEYWORD:\n          {\n            this._stateAfterDoctypeSystemKeyword(cp);\n            break;\n          }\n        case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER:\n          {\n            this._stateBeforeDoctypeSystemIdentifier(cp);\n            break;\n          }\n        case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED:\n          {\n            this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n            break;\n          }\n        case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED:\n          {\n            this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n            break;\n          }\n        case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER:\n          {\n            this._stateAfterDoctypeSystemIdentifier(cp);\n            break;\n          }\n        case State.BOGUS_DOCTYPE:\n          {\n            this._stateBogusDoctype(cp);\n            break;\n          }\n        case State.CDATA_SECTION:\n          {\n            this._stateCdataSection(cp);\n            break;\n          }\n        case State.CDATA_SECTION_BRACKET:\n          {\n            this._stateCdataSectionBracket(cp);\n            break;\n          }\n        case State.CDATA_SECTION_END:\n          {\n            this._stateCdataSectionEnd(cp);\n            break;\n          }\n        case State.CHARACTER_REFERENCE:\n          {\n            this._stateCharacterReference(cp);\n            break;\n          }\n        case State.NAMED_CHARACTER_REFERENCE:\n          {\n            this._stateNamedCharacterReference(cp);\n            break;\n          }\n        case State.AMBIGUOUS_AMPERSAND:\n          {\n            this._stateAmbiguousAmpersand(cp);\n            break;\n          }\n        case State.NUMERIC_CHARACTER_REFERENCE:\n          {\n            this._stateNumericCharacterReference(cp);\n            break;\n          }\n        case State.HEXADEMICAL_CHARACTER_REFERENCE_START:\n          {\n            this._stateHexademicalCharacterReferenceStart(cp);\n            break;\n          }\n        case State.HEXADEMICAL_CHARACTER_REFERENCE:\n          {\n            this._stateHexademicalCharacterReference(cp);\n            break;\n          }\n        case State.DECIMAL_CHARACTER_REFERENCE:\n          {\n            this._stateDecimalCharacterReference(cp);\n            break;\n          }\n        case State.NUMERIC_CHARACTER_REFERENCE_END:\n          {\n            this._stateNumericCharacterReferenceEnd(cp);\n            break;\n          }\n        default:\n          {\n            throw new Error('Unknown state');\n          }\n      }\n    }\n    // State machine\n    // Data state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateData\",\n    value: function _stateData(cp) {\n      switch (cp) {\n        case $.LESS_THAN_SIGN:\n          {\n            this.state = State.TAG_OPEN;\n            break;\n          }\n        case $.AMPERSAND:\n          {\n            this.returnState = State.DATA;\n            this.state = State.CHARACTER_REFERENCE;\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitCodePoint(cp);\n            break;\n          }\n        case $.EOF:\n          {\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._emitCodePoint(cp);\n          }\n      }\n    }\n    //  RCDATA state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateRcdata\",\n    value: function _stateRcdata(cp) {\n      switch (cp) {\n        case $.AMPERSAND:\n          {\n            this.returnState = State.RCDATA;\n            this.state = State.CHARACTER_REFERENCE;\n            break;\n          }\n        case $.LESS_THAN_SIGN:\n          {\n            this.state = State.RCDATA_LESS_THAN_SIGN;\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(REPLACEMENT_CHARACTER);\n            break;\n          }\n        case $.EOF:\n          {\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._emitCodePoint(cp);\n          }\n      }\n    }\n    // RAWTEXT state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateRawtext\",\n    value: function _stateRawtext(cp) {\n      switch (cp) {\n        case $.LESS_THAN_SIGN:\n          {\n            this.state = State.RAWTEXT_LESS_THAN_SIGN;\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(REPLACEMENT_CHARACTER);\n            break;\n          }\n        case $.EOF:\n          {\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._emitCodePoint(cp);\n          }\n      }\n    }\n    // Script data state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptData\",\n    value: function _stateScriptData(cp) {\n      switch (cp) {\n        case $.LESS_THAN_SIGN:\n          {\n            this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(REPLACEMENT_CHARACTER);\n            break;\n          }\n        case $.EOF:\n          {\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._emitCodePoint(cp);\n          }\n      }\n    }\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_statePlaintext\",\n    value: function _statePlaintext(cp) {\n      switch (cp) {\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(REPLACEMENT_CHARACTER);\n            break;\n          }\n        case $.EOF:\n          {\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._emitCodePoint(cp);\n          }\n      }\n    }\n    // Tag open state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateTagOpen\",\n    value: function _stateTagOpen(cp) {\n      if (isAsciiLetter(cp)) {\n        this._createStartTagToken();\n        this.state = State.TAG_NAME;\n        this._stateTagName(cp);\n      } else switch (cp) {\n        case $.EXCLAMATION_MARK:\n          {\n            this.state = State.MARKUP_DECLARATION_OPEN;\n            break;\n          }\n        case $.SOLIDUS:\n          {\n            this.state = State.END_TAG_OPEN;\n            break;\n          }\n        case $.QUESTION_MARK:\n          {\n            this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n            this._createCommentToken(1);\n            this.state = State.BOGUS_COMMENT;\n            this._stateBogusComment(cp);\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('<');\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._emitChars('<');\n            this.state = State.DATA;\n            this._stateData(cp);\n          }\n      }\n    }\n    // End tag open state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateEndTagOpen\",\n    value: function _stateEndTagOpen(cp) {\n      if (isAsciiLetter(cp)) {\n        this._createEndTagToken();\n        this.state = State.TAG_NAME;\n        this._stateTagName(cp);\n      } else switch (cp) {\n        case $.GREATER_THAN_SIGN:\n          {\n            this._err(ERR.missingEndTagName);\n            this.state = State.DATA;\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('</');\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._createCommentToken(2);\n            this.state = State.BOGUS_COMMENT;\n            this._stateBogusComment(cp);\n          }\n      }\n    }\n    // Tag name state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateTagName\",\n    value: function _stateTagName(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            this.state = State.BEFORE_ATTRIBUTE_NAME;\n            break;\n          }\n        case $.SOLIDUS:\n          {\n            this.state = State.SELF_CLOSING_START_TAG;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this.state = State.DATA;\n            this.emitCurrentTagToken();\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            token.tagName += REPLACEMENT_CHARACTER;\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n          }\n      }\n    }\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateRcdataLessThanSign\",\n    value: function _stateRcdataLessThanSign(cp) {\n      if (cp === $.SOLIDUS) {\n        this.state = State.RCDATA_END_TAG_OPEN;\n      } else {\n        this._emitChars('<');\n        this.state = State.RCDATA;\n        this._stateRcdata(cp);\n      }\n    }\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateRcdataEndTagOpen\",\n    value: function _stateRcdataEndTagOpen(cp) {\n      if (isAsciiLetter(cp)) {\n        this.state = State.RCDATA_END_TAG_NAME;\n        this._stateRcdataEndTagName(cp);\n      } else {\n        this._emitChars('</');\n        this.state = State.RCDATA;\n        this._stateRcdata(cp);\n      }\n    }\n  }, {\n    key: \"handleSpecialEndTag\",\n    value: function handleSpecialEndTag(_cp) {\n      if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n        return !this._ensureHibernation();\n      }\n      this._createEndTagToken();\n      var token = this.currentToken;\n      token.tagName = this.lastStartTagName;\n      var cp = this.preprocessor.peek(this.lastStartTagName.length);\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            this._advanceBy(this.lastStartTagName.length);\n            this.state = State.BEFORE_ATTRIBUTE_NAME;\n            return false;\n          }\n        case $.SOLIDUS:\n          {\n            this._advanceBy(this.lastStartTagName.length);\n            this.state = State.SELF_CLOSING_START_TAG;\n            return false;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this._advanceBy(this.lastStartTagName.length);\n            this.emitCurrentTagToken();\n            this.state = State.DATA;\n            return false;\n          }\n        default:\n          {\n            return !this._ensureHibernation();\n          }\n      }\n    }\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateRcdataEndTagName\",\n    value: function _stateRcdataEndTagName(cp) {\n      if (this.handleSpecialEndTag(cp)) {\n        this._emitChars('</');\n        this.state = State.RCDATA;\n        this._stateRcdata(cp);\n      }\n    }\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateRawtextLessThanSign\",\n    value: function _stateRawtextLessThanSign(cp) {\n      if (cp === $.SOLIDUS) {\n        this.state = State.RAWTEXT_END_TAG_OPEN;\n      } else {\n        this._emitChars('<');\n        this.state = State.RAWTEXT;\n        this._stateRawtext(cp);\n      }\n    }\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateRawtextEndTagOpen\",\n    value: function _stateRawtextEndTagOpen(cp) {\n      if (isAsciiLetter(cp)) {\n        this.state = State.RAWTEXT_END_TAG_NAME;\n        this._stateRawtextEndTagName(cp);\n      } else {\n        this._emitChars('</');\n        this.state = State.RAWTEXT;\n        this._stateRawtext(cp);\n      }\n    }\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateRawtextEndTagName\",\n    value: function _stateRawtextEndTagName(cp) {\n      if (this.handleSpecialEndTag(cp)) {\n        this._emitChars('</');\n        this.state = State.RAWTEXT;\n        this._stateRawtext(cp);\n      }\n    }\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptDataLessThanSign\",\n    value: function _stateScriptDataLessThanSign(cp) {\n      switch (cp) {\n        case $.SOLIDUS:\n          {\n            this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n            break;\n          }\n        case $.EXCLAMATION_MARK:\n          {\n            this.state = State.SCRIPT_DATA_ESCAPE_START;\n            this._emitChars('<!');\n            break;\n          }\n        default:\n          {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n          }\n      }\n    }\n    // Script data end tag open state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptDataEndTagOpen\",\n    value: function _stateScriptDataEndTagOpen(cp) {\n      if (isAsciiLetter(cp)) {\n        this.state = State.SCRIPT_DATA_END_TAG_NAME;\n        this._stateScriptDataEndTagName(cp);\n      } else {\n        this._emitChars('</');\n        this.state = State.SCRIPT_DATA;\n        this._stateScriptData(cp);\n      }\n    }\n    // Script data end tag name state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptDataEndTagName\",\n    value: function _stateScriptDataEndTagName(cp) {\n      if (this.handleSpecialEndTag(cp)) {\n        this._emitChars('</');\n        this.state = State.SCRIPT_DATA;\n        this._stateScriptData(cp);\n      }\n    }\n    // Script data escape start state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptDataEscapeStart\",\n    value: function _stateScriptDataEscapeStart(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n        this._emitChars('-');\n      } else {\n        this.state = State.SCRIPT_DATA;\n        this._stateScriptData(cp);\n      }\n    }\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptDataEscapeStartDash\",\n    value: function _stateScriptDataEscapeStartDash(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n        this._emitChars('-');\n      } else {\n        this.state = State.SCRIPT_DATA;\n        this._stateScriptData(cp);\n      }\n    }\n    // Script data escaped state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptDataEscaped\",\n    value: function _stateScriptDataEscaped(cp) {\n      switch (cp) {\n        case $.HYPHEN_MINUS:\n          {\n            this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n            this._emitChars('-');\n            break;\n          }\n        case $.LESS_THAN_SIGN:\n          {\n            this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(REPLACEMENT_CHARACTER);\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._emitCodePoint(cp);\n          }\n      }\n    }\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptDataEscapedDash\",\n    value: function _stateScriptDataEscapedDash(cp) {\n      switch (cp) {\n        case $.HYPHEN_MINUS:\n          {\n            this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n            this._emitChars('-');\n            break;\n          }\n        case $.LESS_THAN_SIGN:\n          {\n            this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._emitChars(REPLACEMENT_CHARACTER);\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._emitCodePoint(cp);\n          }\n      }\n    }\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptDataEscapedDashDash\",\n    value: function _stateScriptDataEscapedDashDash(cp) {\n      switch (cp) {\n        case $.HYPHEN_MINUS:\n          {\n            this._emitChars('-');\n            break;\n          }\n        case $.LESS_THAN_SIGN:\n          {\n            this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this.state = State.SCRIPT_DATA;\n            this._emitChars('>');\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._emitChars(REPLACEMENT_CHARACTER);\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._emitCodePoint(cp);\n          }\n      }\n    }\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptDataEscapedLessThanSign\",\n    value: function _stateScriptDataEscapedLessThanSign(cp) {\n      if (cp === $.SOLIDUS) {\n        this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n      } else if (isAsciiLetter(cp)) {\n        this._emitChars('<');\n        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n        this._stateScriptDataDoubleEscapeStart(cp);\n      } else {\n        this._emitChars('<');\n        this.state = State.SCRIPT_DATA_ESCAPED;\n        this._stateScriptDataEscaped(cp);\n      }\n    }\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptDataEscapedEndTagOpen\",\n    value: function _stateScriptDataEscapedEndTagOpen(cp) {\n      if (isAsciiLetter(cp)) {\n        this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n        this._stateScriptDataEscapedEndTagName(cp);\n      } else {\n        this._emitChars('</');\n        this.state = State.SCRIPT_DATA_ESCAPED;\n        this._stateScriptDataEscaped(cp);\n      }\n    }\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptDataEscapedEndTagName\",\n    value: function _stateScriptDataEscapedEndTagName(cp) {\n      if (this.handleSpecialEndTag(cp)) {\n        this._emitChars('</');\n        this.state = State.SCRIPT_DATA_ESCAPED;\n        this._stateScriptDataEscaped(cp);\n      }\n    }\n    // Script data double escape start state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptDataDoubleEscapeStart\",\n    value: function _stateScriptDataDoubleEscapeStart(cp) {\n      if (this.preprocessor.startsWith($$.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n        this._emitCodePoint(cp);\n        for (var i = 0; i < $$.SCRIPT.length; i++) {\n          this._emitCodePoint(this._consume());\n        }\n        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n      } else if (!this._ensureHibernation()) {\n        this.state = State.SCRIPT_DATA_ESCAPED;\n        this._stateScriptDataEscaped(cp);\n      }\n    }\n    // Script data double escaped state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptDataDoubleEscaped\",\n    value: function _stateScriptDataDoubleEscaped(cp) {\n      switch (cp) {\n        case $.HYPHEN_MINUS:\n          {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n            this._emitChars('-');\n            break;\n          }\n        case $.LESS_THAN_SIGN:\n          {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n            this._emitChars('<');\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(REPLACEMENT_CHARACTER);\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._emitCodePoint(cp);\n          }\n      }\n    }\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptDataDoubleEscapedDash\",\n    value: function _stateScriptDataDoubleEscapedDash(cp) {\n      switch (cp) {\n        case $.HYPHEN_MINUS:\n          {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n            this._emitChars('-');\n            break;\n          }\n        case $.LESS_THAN_SIGN:\n          {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n            this._emitChars('<');\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._emitChars(REPLACEMENT_CHARACTER);\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._emitCodePoint(cp);\n          }\n      }\n    }\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptDataDoubleEscapedDashDash\",\n    value: function _stateScriptDataDoubleEscapedDashDash(cp) {\n      switch (cp) {\n        case $.HYPHEN_MINUS:\n          {\n            this._emitChars('-');\n            break;\n          }\n        case $.LESS_THAN_SIGN:\n          {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n            this._emitChars('<');\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this.state = State.SCRIPT_DATA;\n            this._emitChars('>');\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._emitChars(REPLACEMENT_CHARACTER);\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._emitCodePoint(cp);\n          }\n      }\n    }\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptDataDoubleEscapedLessThanSign\",\n    value: function _stateScriptDataDoubleEscapedLessThanSign(cp) {\n      if (cp === $.SOLIDUS) {\n        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n        this._emitChars('/');\n      } else {\n        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n        this._stateScriptDataDoubleEscaped(cp);\n      }\n    }\n    // Script data double escape end state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateScriptDataDoubleEscapeEnd\",\n    value: function _stateScriptDataDoubleEscapeEnd(cp) {\n      if (this.preprocessor.startsWith($$.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n        this._emitCodePoint(cp);\n        for (var i = 0; i < $$.SCRIPT.length; i++) {\n          this._emitCodePoint(this._consume());\n        }\n        this.state = State.SCRIPT_DATA_ESCAPED;\n      } else if (!this._ensureHibernation()) {\n        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n        this._stateScriptDataDoubleEscaped(cp);\n      }\n    }\n    // Before attribute name state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateBeforeAttributeName\",\n    value: function _stateBeforeAttributeName(cp) {\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            // Ignore whitespace\n            break;\n          }\n        case $.SOLIDUS:\n        case $.GREATER_THAN_SIGN:\n        case $.EOF:\n          {\n            this.state = State.AFTER_ATTRIBUTE_NAME;\n            this._stateAfterAttributeName(cp);\n            break;\n          }\n        case $.EQUALS_SIGN:\n          {\n            this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n            this._createAttr('=');\n            this.state = State.ATTRIBUTE_NAME;\n            break;\n          }\n        default:\n          {\n            this._createAttr('');\n            this.state = State.ATTRIBUTE_NAME;\n            this._stateAttributeName(cp);\n          }\n      }\n    }\n    // Attribute name state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateAttributeName\",\n    value: function _stateAttributeName(cp) {\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n        case $.SOLIDUS:\n        case $.GREATER_THAN_SIGN:\n        case $.EOF:\n          {\n            this._leaveAttrName();\n            this.state = State.AFTER_ATTRIBUTE_NAME;\n            this._stateAfterAttributeName(cp);\n            break;\n          }\n        case $.EQUALS_SIGN:\n          {\n            this._leaveAttrName();\n            this.state = State.BEFORE_ATTRIBUTE_VALUE;\n            break;\n          }\n        case $.QUOTATION_MARK:\n        case $.APOSTROPHE:\n        case $.LESS_THAN_SIGN:\n          {\n            this._err(ERR.unexpectedCharacterInAttributeName);\n            this.currentAttr.name += String.fromCodePoint(cp);\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.name += REPLACEMENT_CHARACTER;\n            break;\n          }\n        default:\n          {\n            this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n          }\n      }\n    }\n    // After attribute name state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateAfterAttributeName\",\n    value: function _stateAfterAttributeName(cp) {\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            // Ignore whitespace\n            break;\n          }\n        case $.SOLIDUS:\n          {\n            this.state = State.SELF_CLOSING_START_TAG;\n            break;\n          }\n        case $.EQUALS_SIGN:\n          {\n            this.state = State.BEFORE_ATTRIBUTE_VALUE;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this.state = State.DATA;\n            this.emitCurrentTagToken();\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._createAttr('');\n            this.state = State.ATTRIBUTE_NAME;\n            this._stateAttributeName(cp);\n          }\n      }\n    }\n    // Before attribute value state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateBeforeAttributeValue\",\n    value: function _stateBeforeAttributeValue(cp) {\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            // Ignore whitespace\n            break;\n          }\n        case $.QUOTATION_MARK:\n          {\n            this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n            break;\n          }\n        case $.APOSTROPHE:\n          {\n            this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this._err(ERR.missingAttributeValue);\n            this.state = State.DATA;\n            this.emitCurrentTagToken();\n            break;\n          }\n        default:\n          {\n            this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n            this._stateAttributeValueUnquoted(cp);\n          }\n      }\n    }\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateAttributeValueDoubleQuoted\",\n    value: function _stateAttributeValueDoubleQuoted(cp) {\n      switch (cp) {\n        case $.QUOTATION_MARK:\n          {\n            this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n            break;\n          }\n        case $.AMPERSAND:\n          {\n            this.returnState = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n            this.state = State.CHARACTER_REFERENCE;\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += REPLACEMENT_CHARACTER;\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this.currentAttr.value += String.fromCodePoint(cp);\n          }\n      }\n    }\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateAttributeValueSingleQuoted\",\n    value: function _stateAttributeValueSingleQuoted(cp) {\n      switch (cp) {\n        case $.APOSTROPHE:\n          {\n            this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n            break;\n          }\n        case $.AMPERSAND:\n          {\n            this.returnState = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n            this.state = State.CHARACTER_REFERENCE;\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += REPLACEMENT_CHARACTER;\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this.currentAttr.value += String.fromCodePoint(cp);\n          }\n      }\n    }\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateAttributeValueUnquoted\",\n    value: function _stateAttributeValueUnquoted(cp) {\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            this._leaveAttrValue();\n            this.state = State.BEFORE_ATTRIBUTE_NAME;\n            break;\n          }\n        case $.AMPERSAND:\n          {\n            this.returnState = State.ATTRIBUTE_VALUE_UNQUOTED;\n            this.state = State.CHARACTER_REFERENCE;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this._leaveAttrValue();\n            this.state = State.DATA;\n            this.emitCurrentTagToken();\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += REPLACEMENT_CHARACTER;\n            break;\n          }\n        case $.QUOTATION_MARK:\n        case $.APOSTROPHE:\n        case $.LESS_THAN_SIGN:\n        case $.EQUALS_SIGN:\n        case $.GRAVE_ACCENT:\n          {\n            this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n            this.currentAttr.value += String.fromCodePoint(cp);\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this.currentAttr.value += String.fromCodePoint(cp);\n          }\n      }\n    }\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateAfterAttributeValueQuoted\",\n    value: function _stateAfterAttributeValueQuoted(cp) {\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            this._leaveAttrValue();\n            this.state = State.BEFORE_ATTRIBUTE_NAME;\n            break;\n          }\n        case $.SOLIDUS:\n          {\n            this._leaveAttrValue();\n            this.state = State.SELF_CLOSING_START_TAG;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this._leaveAttrValue();\n            this.state = State.DATA;\n            this.emitCurrentTagToken();\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._err(ERR.missingWhitespaceBetweenAttributes);\n            this.state = State.BEFORE_ATTRIBUTE_NAME;\n            this._stateBeforeAttributeName(cp);\n          }\n      }\n    }\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateSelfClosingStartTag\",\n    value: function _stateSelfClosingStartTag(cp) {\n      switch (cp) {\n        case $.GREATER_THAN_SIGN:\n          {\n            var token = this.currentToken;\n            token.selfClosing = true;\n            this.state = State.DATA;\n            this.emitCurrentTagToken();\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._err(ERR.unexpectedSolidusInTag);\n            this.state = State.BEFORE_ATTRIBUTE_NAME;\n            this._stateBeforeAttributeName(cp);\n          }\n      }\n    }\n    // Bogus comment state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateBogusComment\",\n    value: function _stateBogusComment(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.GREATER_THAN_SIGN:\n          {\n            this.state = State.DATA;\n            this.emitCurrentComment(token);\n            break;\n          }\n        case $.EOF:\n          {\n            this.emitCurrentComment(token);\n            this._emitEOFToken();\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            token.data += REPLACEMENT_CHARACTER;\n            break;\n          }\n        default:\n          {\n            token.data += String.fromCodePoint(cp);\n          }\n      }\n    }\n    // Markup declaration open state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateMarkupDeclarationOpen\",\n    value: function _stateMarkupDeclarationOpen(cp) {\n      if (this._consumeSequenceIfMatch($$.DASH_DASH, true)) {\n        this._createCommentToken($$.DASH_DASH.length + 1);\n        this.state = State.COMMENT_START;\n      } else if (this._consumeSequenceIfMatch($$.DOCTYPE, false)) {\n        // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n        this.currentLocation = this.getCurrentLocation($$.DOCTYPE.length + 1);\n        this.state = State.DOCTYPE;\n      } else if (this._consumeSequenceIfMatch($$.CDATA_START, true)) {\n        if (this.inForeignNode) {\n          this.state = State.CDATA_SECTION;\n        } else {\n          this._err(ERR.cdataInHtmlContent);\n          this._createCommentToken($$.CDATA_START.length + 1);\n          this.currentToken.data = '[CDATA[';\n          this.state = State.BOGUS_COMMENT;\n        }\n      }\n      //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n      //results are no longer valid and we will need to start over.\n      else if (!this._ensureHibernation()) {\n        this._err(ERR.incorrectlyOpenedComment);\n        this._createCommentToken(2);\n        this.state = State.BOGUS_COMMENT;\n        this._stateBogusComment(cp);\n      }\n    }\n    // Comment start state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateCommentStart\",\n    value: function _stateCommentStart(cp) {\n      switch (cp) {\n        case $.HYPHEN_MINUS:\n          {\n            this.state = State.COMMENT_START_DASH;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = State.DATA;\n            var token = this.currentToken;\n            this.emitCurrentComment(token);\n            break;\n          }\n        default:\n          {\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n          }\n      }\n    }\n    // Comment start dash state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateCommentStartDash\",\n    value: function _stateCommentStartDash(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.HYPHEN_MINUS:\n          {\n            this.state = State.COMMENT_END;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = State.DATA;\n            this.emitCurrentComment(token);\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInComment);\n            this.emitCurrentComment(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            token.data += '-';\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n          }\n      }\n    }\n    // Comment state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateComment\",\n    value: function _stateComment(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.HYPHEN_MINUS:\n          {\n            this.state = State.COMMENT_END_DASH;\n            break;\n          }\n        case $.LESS_THAN_SIGN:\n          {\n            token.data += '<';\n            this.state = State.COMMENT_LESS_THAN_SIGN;\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            token.data += REPLACEMENT_CHARACTER;\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInComment);\n            this.emitCurrentComment(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            token.data += String.fromCodePoint(cp);\n          }\n      }\n    }\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateCommentLessThanSign\",\n    value: function _stateCommentLessThanSign(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.EXCLAMATION_MARK:\n          {\n            token.data += '!';\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n            break;\n          }\n        case $.LESS_THAN_SIGN:\n          {\n            token.data += '<';\n            break;\n          }\n        default:\n          {\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n          }\n      }\n    }\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateCommentLessThanSignBang\",\n    value: function _stateCommentLessThanSignBang(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n      } else {\n        this.state = State.COMMENT;\n        this._stateComment(cp);\n      }\n    }\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateCommentLessThanSignBangDash\",\n    value: function _stateCommentLessThanSignBangDash(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n      } else {\n        this.state = State.COMMENT_END_DASH;\n        this._stateCommentEndDash(cp);\n      }\n    }\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateCommentLessThanSignBangDashDash\",\n    value: function _stateCommentLessThanSignBangDashDash(cp) {\n      if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n        this._err(ERR.nestedComment);\n      }\n      this.state = State.COMMENT_END;\n      this._stateCommentEnd(cp);\n    }\n    // Comment end dash state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateCommentEndDash\",\n    value: function _stateCommentEndDash(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.HYPHEN_MINUS:\n          {\n            this.state = State.COMMENT_END;\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInComment);\n            this.emitCurrentComment(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            token.data += '-';\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n          }\n      }\n    }\n    // Comment end state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateCommentEnd\",\n    value: function _stateCommentEnd(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.GREATER_THAN_SIGN:\n          {\n            this.state = State.DATA;\n            this.emitCurrentComment(token);\n            break;\n          }\n        case $.EXCLAMATION_MARK:\n          {\n            this.state = State.COMMENT_END_BANG;\n            break;\n          }\n        case $.HYPHEN_MINUS:\n          {\n            token.data += '-';\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInComment);\n            this.emitCurrentComment(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            token.data += '--';\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n          }\n      }\n    }\n    // Comment end bang state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateCommentEndBang\",\n    value: function _stateCommentEndBang(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.HYPHEN_MINUS:\n          {\n            token.data += '--!';\n            this.state = State.COMMENT_END_DASH;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this._err(ERR.incorrectlyClosedComment);\n            this.state = State.DATA;\n            this.emitCurrentComment(token);\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInComment);\n            this.emitCurrentComment(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            token.data += '--!';\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n          }\n      }\n    }\n    // DOCTYPE state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateDoctype\",\n    value: function _stateDoctype(cp) {\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            this.state = State.BEFORE_DOCTYPE_NAME;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this.state = State.BEFORE_DOCTYPE_NAME;\n            this._stateBeforeDoctypeName(cp);\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            var token = this.currentToken;\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._err(ERR.missingWhitespaceBeforeDoctypeName);\n            this.state = State.BEFORE_DOCTYPE_NAME;\n            this._stateBeforeDoctypeName(cp);\n          }\n      }\n    }\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateBeforeDoctypeName\",\n    value: function _stateBeforeDoctypeName(cp) {\n      if (isAsciiUpper(cp)) {\n        this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n        this.state = State.DOCTYPE_NAME;\n      } else switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            // Ignore whitespace\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            this._createDoctypeToken(REPLACEMENT_CHARACTER);\n            this.state = State.DOCTYPE_NAME;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this._err(ERR.missingDoctypeName);\n            this._createDoctypeToken(null);\n            var token = this.currentToken;\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this.state = State.DATA;\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            var _token = this.currentToken;\n            _token.forceQuirks = true;\n            this.emitCurrentDoctype(_token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._createDoctypeToken(String.fromCodePoint(cp));\n            this.state = State.DOCTYPE_NAME;\n          }\n      }\n    }\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateDoctypeName\",\n    value: function _stateDoctypeName(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            this.state = State.AFTER_DOCTYPE_NAME;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this.state = State.DATA;\n            this.emitCurrentDoctype(token);\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            token.name += REPLACEMENT_CHARACTER;\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInDoctype);\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n          }\n      }\n    }\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateAfterDoctypeName\",\n    value: function _stateAfterDoctypeName(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            // Ignore whitespace\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this.state = State.DATA;\n            this.emitCurrentDoctype(token);\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInDoctype);\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          if (this._consumeSequenceIfMatch($$.PUBLIC, false)) {\n            this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n          } else if (this._consumeSequenceIfMatch($$.SYSTEM, false)) {\n            this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n          }\n          //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n          //results are no longer valid and we will need to start over.\n          else if (!this._ensureHibernation()) {\n            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n            token.forceQuirks = true;\n            this.state = State.BOGUS_DOCTYPE;\n            this._stateBogusDoctype(cp);\n          }\n      }\n    }\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateAfterDoctypePublicKeyword\",\n    value: function _stateAfterDoctypePublicKeyword(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n            break;\n          }\n        case $.QUOTATION_MARK:\n          {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            token.publicId = '';\n            this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n            break;\n          }\n        case $.APOSTROPHE:\n          {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            token.publicId = '';\n            this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            token.forceQuirks = true;\n            this.state = State.DATA;\n            this.emitCurrentDoctype(token);\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInDoctype);\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            token.forceQuirks = true;\n            this.state = State.BOGUS_DOCTYPE;\n            this._stateBogusDoctype(cp);\n          }\n      }\n    }\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateBeforeDoctypePublicIdentifier\",\n    value: function _stateBeforeDoctypePublicIdentifier(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            // Ignore whitespace\n            break;\n          }\n        case $.QUOTATION_MARK:\n          {\n            token.publicId = '';\n            this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n            break;\n          }\n        case $.APOSTROPHE:\n          {\n            token.publicId = '';\n            this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            token.forceQuirks = true;\n            this.state = State.DATA;\n            this.emitCurrentDoctype(token);\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInDoctype);\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            token.forceQuirks = true;\n            this.state = State.BOGUS_DOCTYPE;\n            this._stateBogusDoctype(cp);\n          }\n      }\n    }\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateDoctypePublicIdentifierDoubleQuoted\",\n    value: function _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.QUOTATION_MARK:\n          {\n            this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            token.publicId += REPLACEMENT_CHARACTER;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this.state = State.DATA;\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInDoctype);\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            token.publicId += String.fromCodePoint(cp);\n          }\n      }\n    }\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateDoctypePublicIdentifierSingleQuoted\",\n    value: function _stateDoctypePublicIdentifierSingleQuoted(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.APOSTROPHE:\n          {\n            this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            token.publicId += REPLACEMENT_CHARACTER;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this.state = State.DATA;\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInDoctype);\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            token.publicId += String.fromCodePoint(cp);\n          }\n      }\n    }\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateAfterDoctypePublicIdentifier\",\n    value: function _stateAfterDoctypePublicIdentifier(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this.state = State.DATA;\n            this.emitCurrentDoctype(token);\n            break;\n          }\n        case $.QUOTATION_MARK:\n          {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            token.systemId = '';\n            this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n            break;\n          }\n        case $.APOSTROPHE:\n          {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            token.systemId = '';\n            this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInDoctype);\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            token.forceQuirks = true;\n            this.state = State.BOGUS_DOCTYPE;\n            this._stateBogusDoctype(cp);\n          }\n      }\n    }\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateBetweenDoctypePublicAndSystemIdentifiers\",\n    value: function _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            // Ignore whitespace\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this.emitCurrentDoctype(token);\n            this.state = State.DATA;\n            break;\n          }\n        case $.QUOTATION_MARK:\n          {\n            token.systemId = '';\n            this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n            break;\n          }\n        case $.APOSTROPHE:\n          {\n            token.systemId = '';\n            this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInDoctype);\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            token.forceQuirks = true;\n            this.state = State.BOGUS_DOCTYPE;\n            this._stateBogusDoctype(cp);\n          }\n      }\n    }\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateAfterDoctypeSystemKeyword\",\n    value: function _stateAfterDoctypeSystemKeyword(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n            break;\n          }\n        case $.QUOTATION_MARK:\n          {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            token.systemId = '';\n            this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n            break;\n          }\n        case $.APOSTROPHE:\n          {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            token.systemId = '';\n            this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            token.forceQuirks = true;\n            this.state = State.DATA;\n            this.emitCurrentDoctype(token);\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInDoctype);\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            token.forceQuirks = true;\n            this.state = State.BOGUS_DOCTYPE;\n            this._stateBogusDoctype(cp);\n          }\n      }\n    }\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateBeforeDoctypeSystemIdentifier\",\n    value: function _stateBeforeDoctypeSystemIdentifier(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            // Ignore whitespace\n            break;\n          }\n        case $.QUOTATION_MARK:\n          {\n            token.systemId = '';\n            this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n            break;\n          }\n        case $.APOSTROPHE:\n          {\n            token.systemId = '';\n            this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            token.forceQuirks = true;\n            this.state = State.DATA;\n            this.emitCurrentDoctype(token);\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInDoctype);\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            token.forceQuirks = true;\n            this.state = State.BOGUS_DOCTYPE;\n            this._stateBogusDoctype(cp);\n          }\n      }\n    }\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateDoctypeSystemIdentifierDoubleQuoted\",\n    value: function _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.QUOTATION_MARK:\n          {\n            this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            token.systemId += REPLACEMENT_CHARACTER;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this.state = State.DATA;\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInDoctype);\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            token.systemId += String.fromCodePoint(cp);\n          }\n      }\n    }\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateDoctypeSystemIdentifierSingleQuoted\",\n    value: function _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.APOSTROPHE:\n          {\n            this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            token.systemId += REPLACEMENT_CHARACTER;\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this.state = State.DATA;\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInDoctype);\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            token.systemId += String.fromCodePoint(cp);\n          }\n      }\n    }\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateAfterDoctypeSystemIdentifier\",\n    value: function _stateAfterDoctypeSystemIdentifier(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.SPACE:\n        case $.LINE_FEED:\n        case $.TABULATION:\n        case $.FORM_FEED:\n          {\n            // Ignore whitespace\n            break;\n          }\n        case $.GREATER_THAN_SIGN:\n          {\n            this.emitCurrentDoctype(token);\n            this.state = State.DATA;\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInDoctype);\n            token.forceQuirks = true;\n            this.emitCurrentDoctype(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n            this.state = State.BOGUS_DOCTYPE;\n            this._stateBogusDoctype(cp);\n          }\n      }\n    }\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateBogusDoctype\",\n    value: function _stateBogusDoctype(cp) {\n      var token = this.currentToken;\n      switch (cp) {\n        case $.GREATER_THAN_SIGN:\n          {\n            this.emitCurrentDoctype(token);\n            this.state = State.DATA;\n            break;\n          }\n        case $.NULL:\n          {\n            this._err(ERR.unexpectedNullCharacter);\n            break;\n          }\n        case $.EOF:\n          {\n            this.emitCurrentDoctype(token);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n        // Do nothing\n      }\n    }\n    // CDATA section state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateCdataSection\",\n    value: function _stateCdataSection(cp) {\n      switch (cp) {\n        case $.RIGHT_SQUARE_BRACKET:\n          {\n            this.state = State.CDATA_SECTION_BRACKET;\n            break;\n          }\n        case $.EOF:\n          {\n            this._err(ERR.eofInCdata);\n            this._emitEOFToken();\n            break;\n          }\n        default:\n          {\n            this._emitCodePoint(cp);\n          }\n      }\n    }\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateCdataSectionBracket\",\n    value: function _stateCdataSectionBracket(cp) {\n      if (cp === $.RIGHT_SQUARE_BRACKET) {\n        this.state = State.CDATA_SECTION_END;\n      } else {\n        this._emitChars(']');\n        this.state = State.CDATA_SECTION;\n        this._stateCdataSection(cp);\n      }\n    }\n    // CDATA section end state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateCdataSectionEnd\",\n    value: function _stateCdataSectionEnd(cp) {\n      switch (cp) {\n        case $.GREATER_THAN_SIGN:\n          {\n            this.state = State.DATA;\n            break;\n          }\n        case $.RIGHT_SQUARE_BRACKET:\n          {\n            this._emitChars(']');\n            break;\n          }\n        default:\n          {\n            this._emitChars(']]');\n            this.state = State.CDATA_SECTION;\n            this._stateCdataSection(cp);\n          }\n      }\n    }\n    // Character reference state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateCharacterReference\",\n    value: function _stateCharacterReference(cp) {\n      if (cp === $.NUMBER_SIGN) {\n        this.state = State.NUMERIC_CHARACTER_REFERENCE;\n      } else if (isAsciiAlphaNumeric(cp)) {\n        this.state = State.NAMED_CHARACTER_REFERENCE;\n        this._stateNamedCharacterReference(cp);\n      } else {\n        this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n        this._reconsumeInState(this.returnState, cp);\n      }\n    }\n    // Named character reference state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateNamedCharacterReference\",\n    value: function _stateNamedCharacterReference(cp) {\n      var matchResult = this._matchNamedCharacterReference(cp);\n      //NOTE: Matching can be abrupted by hibernation. In that case, match\n      //results are no longer valid and we will need to start over.\n      if (this._ensureHibernation()) {\n        // Stay in the state, try again.\n      } else if (matchResult) {\n        for (var i = 0; i < matchResult.length; i++) {\n          this._flushCodePointConsumedAsCharacterReference(matchResult[i]);\n        }\n        this.state = this.returnState;\n      } else {\n        this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n        this.state = State.AMBIGUOUS_AMPERSAND;\n      }\n    }\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateAmbiguousAmpersand\",\n    value: function _stateAmbiguousAmpersand(cp) {\n      if (isAsciiAlphaNumeric(cp)) {\n        this._flushCodePointConsumedAsCharacterReference(cp);\n      } else {\n        if (cp === $.SEMICOLON) {\n          this._err(ERR.unknownNamedCharacterReference);\n        }\n        this._reconsumeInState(this.returnState, cp);\n      }\n    }\n    // Numeric character reference state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateNumericCharacterReference\",\n    value: function _stateNumericCharacterReference(cp) {\n      this.charRefCode = 0;\n      if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n        this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;\n      }\n      // Inlined decimal character reference start state\n      else if (isAsciiDigit(cp)) {\n        this.state = State.DECIMAL_CHARACTER_REFERENCE;\n        this._stateDecimalCharacterReference(cp);\n      } else {\n        this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n        this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n        this._flushCodePointConsumedAsCharacterReference($.NUMBER_SIGN);\n        this._reconsumeInState(this.returnState, cp);\n      }\n    }\n    // Hexademical character reference start state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateHexademicalCharacterReferenceStart\",\n    value: function _stateHexademicalCharacterReferenceStart(cp) {\n      if (isAsciiHexDigit(cp)) {\n        this.state = State.HEXADEMICAL_CHARACTER_REFERENCE;\n        this._stateHexademicalCharacterReference(cp);\n      } else {\n        this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n        this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n        this._flushCodePointConsumedAsCharacterReference($.NUMBER_SIGN);\n        this._unconsume(2);\n        this.state = this.returnState;\n      }\n    }\n    // Hexademical character reference state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateHexademicalCharacterReference\",\n    value: function _stateHexademicalCharacterReference(cp) {\n      if (isAsciiUpperHexDigit(cp)) {\n        this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n      } else if (isAsciiLowerHexDigit(cp)) {\n        this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n      } else if (isAsciiDigit(cp)) {\n        this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n      } else if (cp === $.SEMICOLON) {\n        this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n      } else {\n        this._err(ERR.missingSemicolonAfterCharacterReference);\n        this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n        this._stateNumericCharacterReferenceEnd(cp);\n      }\n    }\n    // Decimal character reference state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateDecimalCharacterReference\",\n    value: function _stateDecimalCharacterReference(cp) {\n      if (isAsciiDigit(cp)) {\n        this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n      } else if (cp === $.SEMICOLON) {\n        this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n      } else {\n        this._err(ERR.missingSemicolonAfterCharacterReference);\n        this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n        this._stateNumericCharacterReferenceEnd(cp);\n      }\n    }\n    // Numeric character reference end state\n    //------------------------------------------------------------------\n  }, {\n    key: \"_stateNumericCharacterReferenceEnd\",\n    value: function _stateNumericCharacterReferenceEnd(cp) {\n      if (this.charRefCode === $.NULL) {\n        this._err(ERR.nullCharacterReference);\n        this.charRefCode = $.REPLACEMENT_CHARACTER;\n      } else if (this.charRefCode > 1114111) {\n        this._err(ERR.characterReferenceOutsideUnicodeRange);\n        this.charRefCode = $.REPLACEMENT_CHARACTER;\n      } else if (isSurrogate(this.charRefCode)) {\n        this._err(ERR.surrogateCharacterReference);\n        this.charRefCode = $.REPLACEMENT_CHARACTER;\n      } else if (isUndefinedCodePoint(this.charRefCode)) {\n        this._err(ERR.noncharacterCharacterReference);\n      } else if (isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n        this._err(ERR.controlCharacterReference);\n        var replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);\n        if (replacement !== undefined) {\n          this.charRefCode = replacement;\n        }\n      }\n      this._flushCodePointConsumedAsCharacterReference(this.charRefCode);\n      this._reconsumeInState(this.returnState, cp);\n    }\n  }]);\n  return Tokenizer;\n}();","map":{"version":3,"names":["Preprocessor","CODE_POINTS","$","SEQUENCES","$$","REPLACEMENT_CHARACTER","isSurrogate","isUndefinedCodePoint","isControlCodePoint","TokenType","getTokenAttr","htmlDecodeTree","BinTrieFlags","determineBranch","ERR","TAG_ID","getTagID","C1_CONTROLS_REFERENCE_REPLACEMENTS","Map","State","TokenizerMode","DATA","RCDATA","RAWTEXT","SCRIPT_DATA","PLAINTEXT","CDATA_SECTION","isAsciiDigit","cp","DIGIT_0","DIGIT_9","isAsciiUpper","LATIN_CAPITAL_A","LATIN_CAPITAL_Z","isAsciiLower","LATIN_SMALL_A","LATIN_SMALL_Z","isAsciiLetter","isAsciiAlphaNumeric","isAsciiUpperHexDigit","LATIN_CAPITAL_F","isAsciiLowerHexDigit","LATIN_SMALL_F","isAsciiHexDigit","toAsciiLower","isWhitespace","SPACE","LINE_FEED","TABULATION","FORM_FEED","isEntityInAttributeInvalidEnd","nextCp","EQUALS_SIGN","isScriptDataDoubleEscapeSequenceEnd","SOLIDUS","GREATER_THAN_SIGN","Tokenizer","options","handler","paused","inLoop","inForeignNode","lastStartTagName","active","state","returnState","charRefCode","consumedAfterSnapshot","currentCharacterToken","currentToken","currentAttr","name","value","preprocessor","currentLocation","getCurrentLocation","code","_a","_b","onParseError","call","getError","offset","sourceCodeLocationInfo","startLine","line","startCol","col","startOffset","endLine","endCol","endOffset","_consume","_ensureHibernation","_callState","writeCallback","Error","_runParsingLoop","chunk","isLastChunk","write","insertHtmlAtCurrentPos","endOfChunkHit","_unconsume","advance","count","retreat","i","pattern","caseSensitive","startsWith","_advanceBy","length","type","START_TAG","tagName","tagID","UNKNOWN","selfClosing","ackSelfClosing","attrs","location","END_TAG","COMMENT","data","initialName","DOCTYPE","forceQuirks","publicId","systemId","chars","attrNameFirstCh","token","push","attrLocations","Object","create","_leaveAttrValue","_err","duplicateAttribute","ct","_emitCurrentCharacterToken","prepareToken","onStartTag","endTagWithAttributes","endTagWithTrailingSolidus","onEndTag","dropParsedChunk","onComment","onDoctype","nextLocation","CHARACTER","onCharacter","NULL_CHARACTER","onNullCharacter","WHITESPACE_CHARACTER","onWhitespaceCharacter","onEof","EOF","ch","_createCharacterToken","NULL","_appendCharToCurrentCharacterToken","String","fromCodePoint","result","excess","withoutSemicolon","current","masked","VALUE_LENGTH","valueLength","SEMICOLON","_isCharacterReferenceInAttribute","peek","AMPERSAND","missingSemicolonAfterCharacterReference","ATTRIBUTE_VALUE_DOUBLE_QUOTED","ATTRIBUTE_VALUE_SINGLE_QUOTED","ATTRIBUTE_VALUE_UNQUOTED","_emitCodePoint","_stateData","_stateRcdata","_stateRawtext","_stateScriptData","_statePlaintext","TAG_OPEN","_stateTagOpen","END_TAG_OPEN","_stateEndTagOpen","TAG_NAME","_stateTagName","RCDATA_LESS_THAN_SIGN","_stateRcdataLessThanSign","RCDATA_END_TAG_OPEN","_stateRcdataEndTagOpen","RCDATA_END_TAG_NAME","_stateRcdataEndTagName","RAWTEXT_LESS_THAN_SIGN","_stateRawtextLessThanSign","RAWTEXT_END_TAG_OPEN","_stateRawtextEndTagOpen","RAWTEXT_END_TAG_NAME","_stateRawtextEndTagName","SCRIPT_DATA_LESS_THAN_SIGN","_stateScriptDataLessThanSign","SCRIPT_DATA_END_TAG_OPEN","_stateScriptDataEndTagOpen","SCRIPT_DATA_END_TAG_NAME","_stateScriptDataEndTagName","SCRIPT_DATA_ESCAPE_START","_stateScriptDataEscapeStart","SCRIPT_DATA_ESCAPE_START_DASH","_stateScriptDataEscapeStartDash","SCRIPT_DATA_ESCAPED","_stateScriptDataEscaped","SCRIPT_DATA_ESCAPED_DASH","_stateScriptDataEscapedDash","SCRIPT_DATA_ESCAPED_DASH_DASH","_stateScriptDataEscapedDashDash","SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN","_stateScriptDataEscapedLessThanSign","SCRIPT_DATA_ESCAPED_END_TAG_OPEN","_stateScriptDataEscapedEndTagOpen","SCRIPT_DATA_ESCAPED_END_TAG_NAME","_stateScriptDataEscapedEndTagName","SCRIPT_DATA_DOUBLE_ESCAPE_START","_stateScriptDataDoubleEscapeStart","SCRIPT_DATA_DOUBLE_ESCAPED","_stateScriptDataDoubleEscaped","SCRIPT_DATA_DOUBLE_ESCAPED_DASH","_stateScriptDataDoubleEscapedDash","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH","_stateScriptDataDoubleEscapedDashDash","SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN","_stateScriptDataDoubleEscapedLessThanSign","SCRIPT_DATA_DOUBLE_ESCAPE_END","_stateScriptDataDoubleEscapeEnd","BEFORE_ATTRIBUTE_NAME","_stateBeforeAttributeName","ATTRIBUTE_NAME","_stateAttributeName","AFTER_ATTRIBUTE_NAME","_stateAfterAttributeName","BEFORE_ATTRIBUTE_VALUE","_stateBeforeAttributeValue","_stateAttributeValueDoubleQuoted","_stateAttributeValueSingleQuoted","_stateAttributeValueUnquoted","AFTER_ATTRIBUTE_VALUE_QUOTED","_stateAfterAttributeValueQuoted","SELF_CLOSING_START_TAG","_stateSelfClosingStartTag","BOGUS_COMMENT","_stateBogusComment","MARKUP_DECLARATION_OPEN","_stateMarkupDeclarationOpen","COMMENT_START","_stateCommentStart","COMMENT_START_DASH","_stateCommentStartDash","_stateComment","COMMENT_LESS_THAN_SIGN","_stateCommentLessThanSign","COMMENT_LESS_THAN_SIGN_BANG","_stateCommentLessThanSignBang","COMMENT_LESS_THAN_SIGN_BANG_DASH","_stateCommentLessThanSignBangDash","COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH","_stateCommentLessThanSignBangDashDash","COMMENT_END_DASH","_stateCommentEndDash","COMMENT_END","_stateCommentEnd","COMMENT_END_BANG","_stateCommentEndBang","_stateDoctype","BEFORE_DOCTYPE_NAME","_stateBeforeDoctypeName","DOCTYPE_NAME","_stateDoctypeName","AFTER_DOCTYPE_NAME","_stateAfterDoctypeName","AFTER_DOCTYPE_PUBLIC_KEYWORD","_stateAfterDoctypePublicKeyword","BEFORE_DOCTYPE_PUBLIC_IDENTIFIER","_stateBeforeDoctypePublicIdentifier","DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypePublicIdentifierDoubleQuoted","DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED","_stateDoctypePublicIdentifierSingleQuoted","AFTER_DOCTYPE_PUBLIC_IDENTIFIER","_stateAfterDoctypePublicIdentifier","BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS","_stateBetweenDoctypePublicAndSystemIdentifiers","AFTER_DOCTYPE_SYSTEM_KEYWORD","_stateAfterDoctypeSystemKeyword","BEFORE_DOCTYPE_SYSTEM_IDENTIFIER","_stateBeforeDoctypeSystemIdentifier","DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypeSystemIdentifierDoubleQuoted","DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED","_stateDoctypeSystemIdentifierSingleQuoted","AFTER_DOCTYPE_SYSTEM_IDENTIFIER","_stateAfterDoctypeSystemIdentifier","BOGUS_DOCTYPE","_stateBogusDoctype","_stateCdataSection","CDATA_SECTION_BRACKET","_stateCdataSectionBracket","CDATA_SECTION_END","_stateCdataSectionEnd","CHARACTER_REFERENCE","_stateCharacterReference","NAMED_CHARACTER_REFERENCE","_stateNamedCharacterReference","AMBIGUOUS_AMPERSAND","_stateAmbiguousAmpersand","NUMERIC_CHARACTER_REFERENCE","_stateNumericCharacterReference","HEXADEMICAL_CHARACTER_REFERENCE_START","_stateHexademicalCharacterReferenceStart","HEXADEMICAL_CHARACTER_REFERENCE","_stateHexademicalCharacterReference","DECIMAL_CHARACTER_REFERENCE","_stateDecimalCharacterReference","NUMERIC_CHARACTER_REFERENCE_END","_stateNumericCharacterReferenceEnd","LESS_THAN_SIGN","unexpectedNullCharacter","_emitEOFToken","_emitChars","_createStartTagToken","EXCLAMATION_MARK","QUESTION_MARK","unexpectedQuestionMarkInsteadOfTagName","_createCommentToken","eofBeforeTagName","invalidFirstCharacterOfTagName","_createEndTagToken","missingEndTagName","emitCurrentTagToken","eofInTag","_cp","handleSpecialEndTag","HYPHEN_MINUS","eofInScriptHtmlCommentLikeText","SCRIPT","unexpectedEqualsSignBeforeAttributeName","_createAttr","_leaveAttrName","QUOTATION_MARK","APOSTROPHE","unexpectedCharacterInAttributeName","missingAttributeValue","GRAVE_ACCENT","unexpectedCharacterInUnquotedAttributeValue","missingWhitespaceBetweenAttributes","unexpectedSolidusInTag","emitCurrentComment","_consumeSequenceIfMatch","DASH_DASH","CDATA_START","cdataInHtmlContent","incorrectlyOpenedComment","abruptClosingOfEmptyComment","eofInComment","nestedComment","incorrectlyClosedComment","eofInDoctype","_createDoctypeToken","emitCurrentDoctype","missingWhitespaceBeforeDoctypeName","fromCharCode","missingDoctypeName","PUBLIC","SYSTEM","invalidCharacterSequenceAfterDoctypeName","missingWhitespaceAfterDoctypePublicKeyword","missingDoctypePublicIdentifier","missingQuoteBeforeDoctypePublicIdentifier","abruptDoctypePublicIdentifier","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","missingQuoteBeforeDoctypeSystemIdentifier","missingWhitespaceAfterDoctypeSystemKeyword","missingDoctypeSystemIdentifier","abruptDoctypeSystemIdentifier","unexpectedCharacterAfterDoctypeSystemIdentifier","RIGHT_SQUARE_BRACKET","eofInCdata","NUMBER_SIGN","_flushCodePointConsumedAsCharacterReference","_reconsumeInState","matchResult","_matchNamedCharacterReference","unknownNamedCharacterReference","LATIN_SMALL_X","LATIN_CAPITAL_X","absenceOfDigitsInNumericCharacterReference","nullCharacterReference","characterReferenceOutsideUnicodeRange","surrogateCharacterReference","noncharacterCharacterReference","CARRIAGE_RETURN","controlCharacterReference","replacement","get","undefined"],"sources":["C:/programowanko/react/schedule-formatter/schedule-formatter/node_modules/cheerio/node_modules/parse5/dist/tokenizer/index.js"],"sourcesContent":["import { Preprocessor } from './preprocessor.js';\nimport { CODE_POINTS as $, SEQUENCES as $$, REPLACEMENT_CHARACTER, isSurrogate, isUndefinedCodePoint, isControlCodePoint, } from '../common/unicode.js';\nimport { TokenType, getTokenAttr, } from '../common/token.js';\nimport { htmlDecodeTree, BinTrieFlags, determineBranch } from 'entities/lib/decode.js';\nimport { ERR } from '../common/error-codes.js';\nimport { TAG_ID, getTagID } from '../common/html.js';\n//C1 Unicode control character reference replacements\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = new Map([\n    [0x80, 8364],\n    [0x82, 8218],\n    [0x83, 402],\n    [0x84, 8222],\n    [0x85, 8230],\n    [0x86, 8224],\n    [0x87, 8225],\n    [0x88, 710],\n    [0x89, 8240],\n    [0x8a, 352],\n    [0x8b, 8249],\n    [0x8c, 338],\n    [0x8e, 381],\n    [0x91, 8216],\n    [0x92, 8217],\n    [0x93, 8220],\n    [0x94, 8221],\n    [0x95, 8226],\n    [0x96, 8211],\n    [0x97, 8212],\n    [0x98, 732],\n    [0x99, 8482],\n    [0x9a, 353],\n    [0x9b, 8250],\n    [0x9c, 339],\n    [0x9e, 382],\n    [0x9f, 376],\n]);\n//States\nvar State;\n(function (State) {\n    State[State[\"DATA\"] = 0] = \"DATA\";\n    State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n    State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n    State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n    State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n    State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n    State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n    State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n    State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n    State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n    State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n    State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n    State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n    State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n    State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n    State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n    State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n    State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n    State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n    State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n    State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n    State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n    State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n    State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n    State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n    State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n    State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n    State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n    State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n    State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n    State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n    State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n    State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n    State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n    State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n    State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n    State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n    State[State[\"NAMED_CHARACTER_REFERENCE\"] = 72] = \"NAMED_CHARACTER_REFERENCE\";\n    State[State[\"AMBIGUOUS_AMPERSAND\"] = 73] = \"AMBIGUOUS_AMPERSAND\";\n    State[State[\"NUMERIC_CHARACTER_REFERENCE\"] = 74] = \"NUMERIC_CHARACTER_REFERENCE\";\n    State[State[\"HEXADEMICAL_CHARACTER_REFERENCE_START\"] = 75] = \"HEXADEMICAL_CHARACTER_REFERENCE_START\";\n    State[State[\"HEXADEMICAL_CHARACTER_REFERENCE\"] = 76] = \"HEXADEMICAL_CHARACTER_REFERENCE\";\n    State[State[\"DECIMAL_CHARACTER_REFERENCE\"] = 77] = \"DECIMAL_CHARACTER_REFERENCE\";\n    State[State[\"NUMERIC_CHARACTER_REFERENCE_END\"] = 78] = \"NUMERIC_CHARACTER_REFERENCE_END\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexport const TokenizerMode = {\n    DATA: State.DATA,\n    RCDATA: State.RCDATA,\n    RAWTEXT: State.RAWTEXT,\n    SCRIPT_DATA: State.SCRIPT_DATA,\n    PLAINTEXT: State.PLAINTEXT,\n    CDATA_SECTION: State.CDATA_SECTION,\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\nfunction toAsciiLower(cp) {\n    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN;\n}\n//Tokenizer\nexport class Tokenizer {\n    constructor(options, handler) {\n        this.options = options;\n        this.handler = handler;\n        this.paused = false;\n        /** Ensures that the parsing loop isn't run multiple times at once. */\n        this.inLoop = false;\n        /**\n         * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n         * and that it is not an integration point for either MathML or HTML.\n         *\n         * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n         */\n        this.inForeignNode = false;\n        this.lastStartTagName = '';\n        this.active = false;\n        this.state = State.DATA;\n        this.returnState = State.DATA;\n        this.charRefCode = -1;\n        this.consumedAfterSnapshot = -1;\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = { name: '', value: '' };\n        this.preprocessor = new Preprocessor(handler);\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    //Errors\n    _err(code) {\n        var _a, _b;\n        (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code));\n    }\n    // NOTE: `offset` may never run across line boundaries.\n    getCurrentLocation(offset) {\n        if (!this.options.sourceCodeLocationInfo) {\n            return null;\n        }\n        return {\n            startLine: this.preprocessor.line,\n            startCol: this.preprocessor.col - offset,\n            startOffset: this.preprocessor.offset - offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1,\n        };\n    }\n    _runParsingLoop() {\n        if (this.inLoop)\n            return;\n        this.inLoop = true;\n        while (this.active && !this.paused) {\n            this.consumedAfterSnapshot = 0;\n            const cp = this._consume();\n            if (!this._ensureHibernation()) {\n                this._callState(cp);\n            }\n        }\n        this.inLoop = false;\n    }\n    //API\n    pause() {\n        this.paused = true;\n    }\n    resume(writeCallback) {\n        if (!this.paused) {\n            throw new Error('Parser was already resumed');\n        }\n        this.paused = false;\n        // Necessary for synchronous resume.\n        if (this.inLoop)\n            return;\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    write(chunk, isLastChunk, writeCallback) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n        this._runParsingLoop();\n    }\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            this._unconsume(this.consumedAfterSnapshot);\n            this.active = false;\n            return true;\n        }\n        return false;\n    }\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n    _unconsume(count) {\n        this.consumedAfterSnapshot -= count;\n        this.preprocessor.retreat(count);\n    }\n    _reconsumeInState(state, cp) {\n        this.state = state;\n        this._callState(cp);\n    }\n    _advanceBy(count) {\n        this.consumedAfterSnapshot += count;\n        for (let i = 0; i < count; i++) {\n            this.preprocessor.advance();\n        }\n    }\n    _consumeSequenceIfMatch(pattern, caseSensitive) {\n        if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n            // We will already have consumed one character before calling this method.\n            this._advanceBy(pattern.length - 1);\n            return true;\n        }\n        return false;\n    }\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: TokenType.START_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(1),\n        };\n    }\n    _createEndTagToken() {\n        this.currentToken = {\n            type: TokenType.END_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(2),\n        };\n    }\n    _createCommentToken(offset) {\n        this.currentToken = {\n            type: TokenType.COMMENT,\n            data: '',\n            location: this.getCurrentLocation(offset),\n        };\n    }\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: TokenType.DOCTYPE,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null,\n            location: this.currentLocation,\n        };\n    }\n    _createCharacterToken(type, chars) {\n        this.currentCharacterToken = {\n            type,\n            chars,\n            location: this.currentLocation,\n        };\n    }\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: '',\n        };\n        this.currentLocation = this.getCurrentLocation(0);\n    }\n    _leaveAttrName() {\n        var _a;\n        var _b;\n        const token = this.currentToken;\n        if (getTokenAttr(token, this.currentAttr.name) === null) {\n            token.attrs.push(this.currentAttr);\n            if (token.location && this.currentLocation) {\n                const attrLocations = ((_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : (_b.attrs = Object.create(null)));\n                attrLocations[this.currentAttr.name] = this.currentLocation;\n                // Set end location\n                this._leaveAttrValue();\n            }\n        }\n        else {\n            this._err(ERR.duplicateAttribute);\n        }\n    }\n    _leaveAttrValue() {\n        if (this.currentLocation) {\n            this.currentLocation.endLine = this.preprocessor.line;\n            this.currentLocation.endCol = this.preprocessor.col;\n            this.currentLocation.endOffset = this.preprocessor.offset;\n        }\n    }\n    //Token emission\n    prepareToken(ct) {\n        this._emitCurrentCharacterToken(ct.location);\n        this.currentToken = null;\n        if (ct.location) {\n            ct.location.endLine = this.preprocessor.line;\n            ct.location.endCol = this.preprocessor.col + 1;\n            ct.location.endOffset = this.preprocessor.offset + 1;\n        }\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    emitCurrentTagToken() {\n        const ct = this.currentToken;\n        this.prepareToken(ct);\n        ct.tagID = getTagID(ct.tagName);\n        if (ct.type === TokenType.START_TAG) {\n            this.lastStartTagName = ct.tagName;\n            this.handler.onStartTag(ct);\n        }\n        else {\n            if (ct.attrs.length > 0) {\n                this._err(ERR.endTagWithAttributes);\n            }\n            if (ct.selfClosing) {\n                this._err(ERR.endTagWithTrailingSolidus);\n            }\n            this.handler.onEndTag(ct);\n        }\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentComment(ct) {\n        this.prepareToken(ct);\n        this.handler.onComment(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentDoctype(ct) {\n        this.prepareToken(ct);\n        this.handler.onDoctype(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    _emitCurrentCharacterToken(nextLocation) {\n        if (this.currentCharacterToken) {\n            //NOTE: if we have a pending character token, make it's end location equal to the\n            //current token's start location.\n            if (nextLocation && this.currentCharacterToken.location) {\n                this.currentCharacterToken.location.endLine = nextLocation.startLine;\n                this.currentCharacterToken.location.endCol = nextLocation.startCol;\n                this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n            }\n            switch (this.currentCharacterToken.type) {\n                case TokenType.CHARACTER: {\n                    this.handler.onCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.NULL_CHARACTER: {\n                    this.handler.onNullCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.WHITESPACE_CHARACTER: {\n                    this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n                    break;\n                }\n            }\n            this.currentCharacterToken = null;\n        }\n    }\n    _emitEOFToken() {\n        const location = this.getCurrentLocation(0);\n        if (location) {\n            location.endLine = location.startLine;\n            location.endCol = location.startCol;\n            location.endOffset = location.startOffset;\n        }\n        this._emitCurrentCharacterToken(location);\n        this.handler.onEof({ type: TokenType.EOF, location });\n        this.active = false;\n    }\n    //Characters emission\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, the parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken) {\n            if (this.currentCharacterToken.type !== type) {\n                this.currentLocation = this.getCurrentLocation(0);\n                this._emitCurrentCharacterToken(this.currentLocation);\n                this.preprocessor.dropParsedChunk();\n            }\n            else {\n                this.currentCharacterToken.chars += ch;\n                return;\n            }\n        }\n        this._createCharacterToken(type, ch);\n    }\n    _emitCodePoint(cp) {\n        const type = isWhitespace(cp)\n            ? TokenType.WHITESPACE_CHARACTER\n            : cp === $.NULL\n                ? TokenType.NULL_CHARACTER\n                : TokenType.CHARACTER;\n        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n    }\n    //NOTE: used when we emit characters explicitly.\n    //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);\n    }\n    // Character reference helpers\n    _matchNamedCharacterReference(cp) {\n        let result = null;\n        let excess = 0;\n        let withoutSemicolon = false;\n        for (let i = 0, current = htmlDecodeTree[0]; i >= 0; cp = this._consume()) {\n            i = determineBranch(htmlDecodeTree, current, i + 1, cp);\n            if (i < 0)\n                break;\n            excess += 1;\n            current = htmlDecodeTree[i];\n            const masked = current & BinTrieFlags.VALUE_LENGTH;\n            // If the branch is a value, store it and continue\n            if (masked) {\n                // The mask is the number of bytes of the value, including the current byte.\n                const valueLength = (masked >> 14) - 1;\n                // Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n                // See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n                if (cp !== $.SEMICOLON &&\n                    this._isCharacterReferenceInAttribute() &&\n                    isEntityInAttributeInvalidEnd(this.preprocessor.peek(1))) {\n                    //NOTE: we don't flush all consumed code points here, and instead switch back to the original state after\n                    //emitting an ampersand. This is fine, as alphanumeric characters won't be parsed differently in attributes.\n                    result = [$.AMPERSAND];\n                    // Skip over the value.\n                    i += valueLength;\n                }\n                else {\n                    // If this is a surrogate pair, consume the next two bytes.\n                    result =\n                        valueLength === 0\n                            ? [htmlDecodeTree[i] & ~BinTrieFlags.VALUE_LENGTH]\n                            : valueLength === 1\n                                ? [htmlDecodeTree[++i]]\n                                : [htmlDecodeTree[++i], htmlDecodeTree[++i]];\n                    excess = 0;\n                    withoutSemicolon = cp !== $.SEMICOLON;\n                }\n                if (valueLength === 0) {\n                    // If the value is zero-length, we're done.\n                    this._consume();\n                    break;\n                }\n            }\n        }\n        this._unconsume(excess);\n        if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n        }\n        // We want to emit the error above on the code point after the entity.\n        // We always consume one code point too many in the loop, and we wait to\n        // unconsume it until after the error is emitted.\n        this._unconsume(1);\n        return result;\n    }\n    _isCharacterReferenceInAttribute() {\n        return (this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED);\n    }\n    _flushCodePointConsumedAsCharacterReference(cp) {\n        if (this._isCharacterReferenceInAttribute()) {\n            this.currentAttr.value += String.fromCodePoint(cp);\n        }\n        else {\n            this._emitCodePoint(cp);\n        }\n    }\n    // Calling states this way turns out to be much faster than any other approach.\n    _callState(cp) {\n        switch (this.state) {\n            case State.DATA: {\n                this._stateData(cp);\n                break;\n            }\n            case State.RCDATA: {\n                this._stateRcdata(cp);\n                break;\n            }\n            case State.RAWTEXT: {\n                this._stateRawtext(cp);\n                break;\n            }\n            case State.SCRIPT_DATA: {\n                this._stateScriptData(cp);\n                break;\n            }\n            case State.PLAINTEXT: {\n                this._statePlaintext(cp);\n                break;\n            }\n            case State.TAG_OPEN: {\n                this._stateTagOpen(cp);\n                break;\n            }\n            case State.END_TAG_OPEN: {\n                this._stateEndTagOpen(cp);\n                break;\n            }\n            case State.TAG_NAME: {\n                this._stateTagName(cp);\n                break;\n            }\n            case State.RCDATA_LESS_THAN_SIGN: {\n                this._stateRcdataLessThanSign(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_OPEN: {\n                this._stateRcdataEndTagOpen(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_NAME: {\n                this._stateRcdataEndTagName(cp);\n                break;\n            }\n            case State.RAWTEXT_LESS_THAN_SIGN: {\n                this._stateRawtextLessThanSign(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_OPEN: {\n                this._stateRawtextEndTagOpen(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_NAME: {\n                this._stateRawtextEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_LESS_THAN_SIGN: {\n                this._stateScriptDataLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_OPEN: {\n                this._stateScriptDataEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_NAME: {\n                this._stateScriptDataEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START: {\n                this._stateScriptDataEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START_DASH: {\n                this._stateScriptDataEscapeStartDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED: {\n                this._stateScriptDataEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH: {\n                this._stateScriptDataEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH_DASH: {\n                this._stateScriptDataEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {\n                this._stateScriptDataEscapedEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {\n                this._stateScriptDataEscapedEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_START: {\n                this._stateScriptDataDoubleEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED: {\n                this._stateScriptDataDoubleEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {\n                this._stateScriptDataDoubleEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {\n                this._stateScriptDataDoubleEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataDoubleEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_END: {\n                this._stateScriptDataDoubleEscapeEnd(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_NAME: {\n                this._stateBeforeAttributeName(cp);\n                break;\n            }\n            case State.ATTRIBUTE_NAME: {\n                this._stateAttributeName(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_NAME: {\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_VALUE: {\n                this._stateBeforeAttributeValue(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {\n                this._stateAttributeValueDoubleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_SINGLE_QUOTED: {\n                this._stateAttributeValueSingleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_UNQUOTED: {\n                this._stateAttributeValueUnquoted(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_VALUE_QUOTED: {\n                this._stateAfterAttributeValueQuoted(cp);\n                break;\n            }\n            case State.SELF_CLOSING_START_TAG: {\n                this._stateSelfClosingStartTag(cp);\n                break;\n            }\n            case State.BOGUS_COMMENT: {\n                this._stateBogusComment(cp);\n                break;\n            }\n            case State.MARKUP_DECLARATION_OPEN: {\n                this._stateMarkupDeclarationOpen(cp);\n                break;\n            }\n            case State.COMMENT_START: {\n                this._stateCommentStart(cp);\n                break;\n            }\n            case State.COMMENT_START_DASH: {\n                this._stateCommentStartDash(cp);\n                break;\n            }\n            case State.COMMENT: {\n                this._stateComment(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN: {\n                this._stateCommentLessThanSign(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG: {\n                this._stateCommentLessThanSignBang(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH: {\n                this._stateCommentLessThanSignBangDash(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {\n                this._stateCommentLessThanSignBangDashDash(cp);\n                break;\n            }\n            case State.COMMENT_END_DASH: {\n                this._stateCommentEndDash(cp);\n                break;\n            }\n            case State.COMMENT_END: {\n                this._stateCommentEnd(cp);\n                break;\n            }\n            case State.COMMENT_END_BANG: {\n                this._stateCommentEndBang(cp);\n                break;\n            }\n            case State.DOCTYPE: {\n                this._stateDoctype(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_NAME: {\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case State.DOCTYPE_NAME: {\n                this._stateDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_NAME: {\n                this._stateAfterDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_KEYWORD: {\n                this._stateAfterDoctypePublicKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateBeforeDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypePublicIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateAfterDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {\n                this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_KEYWORD: {\n                this._stateAfterDoctypeSystemKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateBeforeDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateAfterDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.BOGUS_DOCTYPE: {\n                this._stateBogusDoctype(cp);\n                break;\n            }\n            case State.CDATA_SECTION: {\n                this._stateCdataSection(cp);\n                break;\n            }\n            case State.CDATA_SECTION_BRACKET: {\n                this._stateCdataSectionBracket(cp);\n                break;\n            }\n            case State.CDATA_SECTION_END: {\n                this._stateCdataSectionEnd(cp);\n                break;\n            }\n            case State.CHARACTER_REFERENCE: {\n                this._stateCharacterReference(cp);\n                break;\n            }\n            case State.NAMED_CHARACTER_REFERENCE: {\n                this._stateNamedCharacterReference(cp);\n                break;\n            }\n            case State.AMBIGUOUS_AMPERSAND: {\n                this._stateAmbiguousAmpersand(cp);\n                break;\n            }\n            case State.NUMERIC_CHARACTER_REFERENCE: {\n                this._stateNumericCharacterReference(cp);\n                break;\n            }\n            case State.HEXADEMICAL_CHARACTER_REFERENCE_START: {\n                this._stateHexademicalCharacterReferenceStart(cp);\n                break;\n            }\n            case State.HEXADEMICAL_CHARACTER_REFERENCE: {\n                this._stateHexademicalCharacterReference(cp);\n                break;\n            }\n            case State.DECIMAL_CHARACTER_REFERENCE: {\n                this._stateDecimalCharacterReference(cp);\n                break;\n            }\n            case State.NUMERIC_CHARACTER_REFERENCE_END: {\n                this._stateNumericCharacterReferenceEnd(cp);\n                break;\n            }\n            default: {\n                throw new Error('Unknown state');\n            }\n        }\n    }\n    // State machine\n    // Data state\n    //------------------------------------------------------------------\n    _stateData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.TAG_OPEN;\n                break;\n            }\n            case $.AMPERSAND: {\n                this.returnState = State.DATA;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    //  RCDATA state\n    //------------------------------------------------------------------\n    _stateRcdata(cp) {\n        switch (cp) {\n            case $.AMPERSAND: {\n                this.returnState = State.RCDATA;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RCDATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    _stateRawtext(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RAWTEXT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data state\n    //------------------------------------------------------------------\n    _stateScriptData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    _statePlaintext(cp) {\n        switch (cp) {\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Tag open state\n    //------------------------------------------------------------------\n    _stateTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.EXCLAMATION_MARK: {\n                    this.state = State.MARKUP_DECLARATION_OPEN;\n                    break;\n                }\n                case $.SOLIDUS: {\n                    this.state = State.END_TAG_OPEN;\n                    break;\n                }\n                case $.QUESTION_MARK: {\n                    this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n                    this._createCommentToken(1);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('<');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._emitChars('<');\n                    this.state = State.DATA;\n                    this._stateData(cp);\n                }\n            }\n    }\n    // End tag open state\n    //------------------------------------------------------------------\n    _stateEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingEndTagName);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('</');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._createCommentToken(2);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                }\n            }\n    }\n    // Tag name state\n    //------------------------------------------------------------------\n    _stateTagName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.tagName += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    _stateRcdataLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RCDATA_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RCDATA_END_TAG_NAME;\n            this._stateRcdataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    handleSpecialEndTag(_cp) {\n        if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n            return !this._ensureHibernation();\n        }\n        this._createEndTagToken();\n        const token = this.currentToken;\n        token.tagName = this.lastStartTagName;\n        const cp = this.preprocessor.peek(this.lastStartTagName.length);\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                return false;\n            }\n            case $.SOLIDUS: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.SELF_CLOSING_START_TAG;\n                return false;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.emitCurrentTagToken();\n                this.state = State.DATA;\n                return false;\n            }\n            default: {\n                return !this._ensureHibernation();\n            }\n        }\n    }\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    _stateRawtextLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RAWTEXT_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RAWTEXT_END_TAG_NAME;\n            this._stateRawtextEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataLessThanSign(cp) {\n        switch (cp) {\n            case $.SOLIDUS: {\n                this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.SCRIPT_DATA_ESCAPE_START;\n                this._emitChars('<!');\n                break;\n            }\n            default: {\n                this._emitChars('<');\n                this.state = State.SCRIPT_DATA;\n                this._stateScriptData(cp);\n            }\n        }\n    }\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_END_TAG_NAME;\n            this._stateScriptDataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStart(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStartDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n        }\n        else if (isAsciiLetter(cp)) {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n            this._stateScriptDataDoubleEscapeStart(cp);\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n            this._stateScriptDataEscapedEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeStart(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n            this._emitChars('/');\n        }\n        else {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeEnd(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Before attribute name state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n                this._createAttr('=');\n                this.state = State.ATTRIBUTE_NAME;\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Attribute name state\n    //------------------------------------------------------------------\n    _stateAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED:\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this._leaveAttrName();\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._leaveAttrName();\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN: {\n                this._err(ERR.unexpectedCharacterInAttributeName);\n                this.currentAttr.name += String.fromCodePoint(cp);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After attribute name state\n    //------------------------------------------------------------------\n    _stateAfterAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Before attribute value state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeValue(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingAttributeValue);\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            default: {\n                this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n                this._stateAttributeValueUnquoted(cp);\n            }\n        }\n    }\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueDoubleQuoted(cp) {\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this.returnState = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueSingleQuoted(cp) {\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this.returnState = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueUnquoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.AMPERSAND: {\n                this.returnState = State.ATTRIBUTE_VALUE_UNQUOTED;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN:\n            case $.EQUALS_SIGN:\n            case $.GRAVE_ACCENT: {\n                this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n                this.currentAttr.value += String.fromCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    _stateAfterAttributeValueQuoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this._leaveAttrValue();\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBetweenAttributes);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    _stateSelfClosingStartTag(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                const token = this.currentToken;\n                token.selfClosing = true;\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedSolidusInTag);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Bogus comment state\n    //------------------------------------------------------------------\n    _stateBogusComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    _stateMarkupDeclarationOpen(cp) {\n        if (this._consumeSequenceIfMatch($$.DASH_DASH, true)) {\n            this._createCommentToken($$.DASH_DASH.length + 1);\n            this.state = State.COMMENT_START;\n        }\n        else if (this._consumeSequenceIfMatch($$.DOCTYPE, false)) {\n            // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n            this.currentLocation = this.getCurrentLocation($$.DOCTYPE.length + 1);\n            this.state = State.DOCTYPE;\n        }\n        else if (this._consumeSequenceIfMatch($$.CDATA_START, true)) {\n            if (this.inForeignNode) {\n                this.state = State.CDATA_SECTION;\n            }\n            else {\n                this._err(ERR.cdataInHtmlContent);\n                this._createCommentToken($$.CDATA_START.length + 1);\n                this.currentToken.data = '[CDATA[';\n                this.state = State.BOGUS_COMMENT;\n            }\n        }\n        //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.incorrectlyOpenedComment);\n            this._createCommentToken(2);\n            this.state = State.BOGUS_COMMENT;\n            this._stateBogusComment(cp);\n        }\n    }\n    // Comment start state\n    //------------------------------------------------------------------\n    _stateCommentStart(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_START_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                const token = this.currentToken;\n                this.emitCurrentComment(token);\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment start dash state\n    //------------------------------------------------------------------\n    _stateCommentStartDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment state\n    //------------------------------------------------------------------\n    _stateComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                this.state = State.COMMENT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSign(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.EXCLAMATION_MARK: {\n                token.data += '!';\n                this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBang(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n        }\n        else {\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n        }\n    }\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n        }\n        else {\n            this.state = State.COMMENT_END_DASH;\n            this._stateCommentEndDash(cp);\n        }\n    }\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDashDash(cp) {\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n            this._err(ERR.nestedComment);\n        }\n        this.state = State.COMMENT_END;\n        this._stateCommentEnd(cp);\n    }\n    // Comment end dash state\n    //------------------------------------------------------------------\n    _stateCommentEndDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end state\n    //------------------------------------------------------------------\n    _stateCommentEnd(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.COMMENT_END_BANG;\n                break;\n            }\n            case $.HYPHEN_MINUS: {\n                token.data += '-';\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end bang state\n    //------------------------------------------------------------------\n    _stateCommentEndBang(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                token.data += '--!';\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.incorrectlyClosedComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--!';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    _stateDoctype(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                this._createDoctypeToken(null);\n                const token = this.currentToken;\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBeforeDoctypeName);\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n            }\n        }\n    }\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeName(cp) {\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n            this.state = State.DOCTYPE_NAME;\n        }\n        else\n            switch (cp) {\n                case $.SPACE:\n                case $.LINE_FEED:\n                case $.TABULATION:\n                case $.FORM_FEED: {\n                    // Ignore whitespace\n                    break;\n                }\n                case $.NULL: {\n                    this._err(ERR.unexpectedNullCharacter);\n                    this._createDoctypeToken(REPLACEMENT_CHARACTER);\n                    this.state = State.DOCTYPE_NAME;\n                    break;\n                }\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingDoctypeName);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofInDoctype);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._createDoctypeToken(String.fromCodePoint(cp));\n                    this.state = State.DOCTYPE_NAME;\n                }\n            }\n    }\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.AFTER_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default:\n                if (this._consumeSequenceIfMatch($$.PUBLIC, false)) {\n                    this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n                }\n                else if (this._consumeSequenceIfMatch($$.SYSTEM, false)) {\n                    this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n                }\n                //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n                //results are no longer valid and we will need to start over.\n                else if (!this._ensureHibernation()) {\n                    this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n        }\n    }\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    _stateBogusDoctype(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    // CDATA section state\n    //------------------------------------------------------------------\n    _stateCdataSection(cp) {\n        switch (cp) {\n            case $.RIGHT_SQUARE_BRACKET: {\n                this.state = State.CDATA_SECTION_BRACKET;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInCdata);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    _stateCdataSectionBracket(cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = State.CDATA_SECTION_END;\n        }\n        else {\n            this._emitChars(']');\n            this.state = State.CDATA_SECTION;\n            this._stateCdataSection(cp);\n        }\n    }\n    // CDATA section end state\n    //------------------------------------------------------------------\n    _stateCdataSectionEnd(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                break;\n            }\n            case $.RIGHT_SQUARE_BRACKET: {\n                this._emitChars(']');\n                break;\n            }\n            default: {\n                this._emitChars(']]');\n                this.state = State.CDATA_SECTION;\n                this._stateCdataSection(cp);\n            }\n        }\n    }\n    // Character reference state\n    //------------------------------------------------------------------\n    _stateCharacterReference(cp) {\n        if (cp === $.NUMBER_SIGN) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE;\n        }\n        else if (isAsciiAlphaNumeric(cp)) {\n            this.state = State.NAMED_CHARACTER_REFERENCE;\n            this._stateNamedCharacterReference(cp);\n        }\n        else {\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Named character reference state\n    //------------------------------------------------------------------\n    _stateNamedCharacterReference(cp) {\n        const matchResult = this._matchNamedCharacterReference(cp);\n        //NOTE: Matching can be abrupted by hibernation. In that case, match\n        //results are no longer valid and we will need to start over.\n        if (this._ensureHibernation()) {\n            // Stay in the state, try again.\n        }\n        else if (matchResult) {\n            for (let i = 0; i < matchResult.length; i++) {\n                this._flushCodePointConsumedAsCharacterReference(matchResult[i]);\n            }\n            this.state = this.returnState;\n        }\n        else {\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this.state = State.AMBIGUOUS_AMPERSAND;\n        }\n    }\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    _stateAmbiguousAmpersand(cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }\n        else {\n            if (cp === $.SEMICOLON) {\n                this._err(ERR.unknownNamedCharacterReference);\n            }\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Numeric character reference state\n    //------------------------------------------------------------------\n    _stateNumericCharacterReference(cp) {\n        this.charRefCode = 0;\n        if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;\n        }\n        // Inlined decimal character reference start state\n        else if (isAsciiDigit(cp)) {\n            this.state = State.DECIMAL_CHARACTER_REFERENCE;\n            this._stateDecimalCharacterReference(cp);\n        }\n        else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this._flushCodePointConsumedAsCharacterReference($.NUMBER_SIGN);\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Hexademical character reference start state\n    //------------------------------------------------------------------\n    _stateHexademicalCharacterReferenceStart(cp) {\n        if (isAsciiHexDigit(cp)) {\n            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE;\n            this._stateHexademicalCharacterReference(cp);\n        }\n        else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this._flushCodePointConsumedAsCharacterReference($.NUMBER_SIGN);\n            this._unconsume(2);\n            this.state = this.returnState;\n        }\n    }\n    // Hexademical character reference state\n    //------------------------------------------------------------------\n    _stateHexademicalCharacterReference(cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        }\n        else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        }\n        else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        }\n        else if (cp === $.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n        }\n        else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n            this._stateNumericCharacterReferenceEnd(cp);\n        }\n    }\n    // Decimal character reference state\n    //------------------------------------------------------------------\n    _stateDecimalCharacterReference(cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        }\n        else if (cp === $.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n        }\n        else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n            this._stateNumericCharacterReferenceEnd(cp);\n        }\n    }\n    // Numeric character reference end state\n    //------------------------------------------------------------------\n    _stateNumericCharacterReferenceEnd(cp) {\n        if (this.charRefCode === $.NULL) {\n            this._err(ERR.nullCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        }\n        else if (this.charRefCode > 1114111) {\n            this._err(ERR.characterReferenceOutsideUnicodeRange);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        }\n        else if (isSurrogate(this.charRefCode)) {\n            this._err(ERR.surrogateCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        }\n        else if (isUndefinedCodePoint(this.charRefCode)) {\n            this._err(ERR.noncharacterCharacterReference);\n        }\n        else if (isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n            this._err(ERR.controlCharacterReference);\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);\n            if (replacement !== undefined) {\n                this.charRefCode = replacement;\n            }\n        }\n        this._flushCodePointConsumedAsCharacterReference(this.charRefCode);\n        this._reconsumeInState(this.returnState, cp);\n    }\n}\n//# sourceMappingURL=index.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module"}