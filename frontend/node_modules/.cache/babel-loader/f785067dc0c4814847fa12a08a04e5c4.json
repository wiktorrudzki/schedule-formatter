{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/programowanko/react/schedule-formatter/schedule-formatter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"C:/programowanko/react/schedule-formatter/schedule-formatter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { TAG_NAMES as $, NS, hasUnescapedText } from '../common/html.js';\nimport { escapeText, escapeAttribute } from 'entities/lib/escape.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\n// Sets\nvar VOID_ELEMENTS = new Set([$.AREA, $.BASE, $.BASEFONT, $.BGSOUND, $.BR, $.COL, $.EMBED, $.FRAME, $.HR, $.IMG, $.INPUT, $.KEYGEN, $.LINK, $.META, $.PARAM, $.SOURCE, $.TRACK, $.WBR]);\nfunction isVoidElement(node, options) {\n  return options.treeAdapter.isElementNode(node) && options.treeAdapter.getNamespaceURI(node) === NS.HTML && VOID_ELEMENTS.has(options.treeAdapter.getTagName(node));\n}\nvar defaultOpts = {\n  treeAdapter: defaultTreeAdapter,\n  scriptingEnabled: true\n};\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serialize(node, options) {\n  var opts = _objectSpread(_objectSpread({}, defaultOpts), options);\n  if (isVoidElement(node, opts)) {\n    return '';\n  }\n  return serializeChildNodes(node, opts);\n}\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const html = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serializeOuter(node, options) {\n  var opts = _objectSpread(_objectSpread({}, defaultOpts), options);\n  return serializeNode(node, opts);\n}\nfunction serializeChildNodes(parentNode, options) {\n  var html = '';\n  // Get container of the child nodes\n  var container = options.treeAdapter.isElementNode(parentNode) && options.treeAdapter.getTagName(parentNode) === $.TEMPLATE && options.treeAdapter.getNamespaceURI(parentNode) === NS.HTML ? options.treeAdapter.getTemplateContent(parentNode) : parentNode;\n  var childNodes = options.treeAdapter.getChildNodes(container);\n  if (childNodes) {\n    var _iterator = _createForOfIteratorHelper(childNodes),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var currentNode = _step.value;\n        html += serializeNode(currentNode, options);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return html;\n}\nfunction serializeNode(node, options) {\n  if (options.treeAdapter.isElementNode(node)) {\n    return serializeElement(node, options);\n  }\n  if (options.treeAdapter.isTextNode(node)) {\n    return serializeTextNode(node, options);\n  }\n  if (options.treeAdapter.isCommentNode(node)) {\n    return serializeCommentNode(node, options);\n  }\n  if (options.treeAdapter.isDocumentTypeNode(node)) {\n    return serializeDocumentTypeNode(node, options);\n  }\n  // Return an empty string for unknown nodes\n  return '';\n}\nfunction serializeElement(node, options) {\n  var tn = options.treeAdapter.getTagName(node);\n  return \"<\".concat(tn).concat(serializeAttributes(node, options), \">\").concat(isVoidElement(node, options) ? '' : \"\".concat(serializeChildNodes(node, options), \"</\").concat(tn, \">\"));\n}\nfunction serializeAttributes(node, _ref) {\n  var treeAdapter = _ref.treeAdapter;\n  var html = '';\n  var _iterator2 = _createForOfIteratorHelper(treeAdapter.getAttrList(node)),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var attr = _step2.value;\n      html += ' ';\n      if (!attr.namespace) {\n        html += attr.name;\n      } else switch (attr.namespace) {\n        case NS.XML:\n          {\n            html += \"xml:\".concat(attr.name);\n            break;\n          }\n        case NS.XMLNS:\n          {\n            if (attr.name !== 'xmlns') {\n              html += 'xmlns:';\n            }\n            html += attr.name;\n            break;\n          }\n        case NS.XLINK:\n          {\n            html += \"xlink:\".concat(attr.name);\n            break;\n          }\n        default:\n          {\n            html += \"\".concat(attr.prefix, \":\").concat(attr.name);\n          }\n      }\n      html += \"=\\\"\".concat(escapeAttribute(attr.value), \"\\\"\");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return html;\n}\nfunction serializeTextNode(node, options) {\n  var treeAdapter = options.treeAdapter;\n  var content = treeAdapter.getTextNodeContent(node);\n  var parent = treeAdapter.getParentNode(node);\n  var parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n  return parentTn && treeAdapter.getNamespaceURI(parent) === NS.HTML && hasUnescapedText(parentTn, options.scriptingEnabled) ? content : escapeText(content);\n}\nfunction serializeCommentNode(node, _ref2) {\n  var treeAdapter = _ref2.treeAdapter;\n  return \"<!--\".concat(treeAdapter.getCommentNodeContent(node), \"-->\");\n}\nfunction serializeDocumentTypeNode(node, _ref3) {\n  var treeAdapter = _ref3.treeAdapter;\n  return \"<!DOCTYPE \".concat(treeAdapter.getDocumentTypeNodeName(node), \">\");\n}","map":{"version":3,"names":["TAG_NAMES","$","NS","hasUnescapedText","escapeText","escapeAttribute","defaultTreeAdapter","VOID_ELEMENTS","Set","AREA","BASE","BASEFONT","BGSOUND","BR","COL","EMBED","FRAME","HR","IMG","INPUT","KEYGEN","LINK","META","PARAM","SOURCE","TRACK","WBR","isVoidElement","node","options","treeAdapter","isElementNode","getNamespaceURI","HTML","has","getTagName","defaultOpts","scriptingEnabled","serialize","opts","serializeChildNodes","serializeOuter","serializeNode","parentNode","html","container","TEMPLATE","getTemplateContent","childNodes","getChildNodes","currentNode","serializeElement","isTextNode","serializeTextNode","isCommentNode","serializeCommentNode","isDocumentTypeNode","serializeDocumentTypeNode","tn","serializeAttributes","getAttrList","attr","namespace","name","XML","XMLNS","XLINK","prefix","value","content","getTextNodeContent","parent","getParentNode","parentTn","getCommentNodeContent","getDocumentTypeNodeName"],"sources":["C:/programowanko/react/schedule-formatter/schedule-formatter/node_modules/parse5-htmlparser2-tree-adapter/node_modules/parse5/dist/serializer/index.js"],"sourcesContent":["import { TAG_NAMES as $, NS, hasUnescapedText } from '../common/html.js';\nimport { escapeText, escapeAttribute } from 'entities/lib/escape.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\n// Sets\nconst VOID_ELEMENTS = new Set([\n    $.AREA,\n    $.BASE,\n    $.BASEFONT,\n    $.BGSOUND,\n    $.BR,\n    $.COL,\n    $.EMBED,\n    $.FRAME,\n    $.HR,\n    $.IMG,\n    $.INPUT,\n    $.KEYGEN,\n    $.LINK,\n    $.META,\n    $.PARAM,\n    $.SOURCE,\n    $.TRACK,\n    $.WBR,\n]);\nfunction isVoidElement(node, options) {\n    return (options.treeAdapter.isElementNode(node) &&\n        options.treeAdapter.getNamespaceURI(node) === NS.HTML &&\n        VOID_ELEMENTS.has(options.treeAdapter.getTagName(node)));\n}\nconst defaultOpts = { treeAdapter: defaultTreeAdapter, scriptingEnabled: true };\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serialize(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    if (isVoidElement(node, opts)) {\n        return '';\n    }\n    return serializeChildNodes(node, opts);\n}\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const html = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serializeOuter(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    return serializeNode(node, opts);\n}\nfunction serializeChildNodes(parentNode, options) {\n    let html = '';\n    // Get container of the child nodes\n    const container = options.treeAdapter.isElementNode(parentNode) &&\n        options.treeAdapter.getTagName(parentNode) === $.TEMPLATE &&\n        options.treeAdapter.getNamespaceURI(parentNode) === NS.HTML\n        ? options.treeAdapter.getTemplateContent(parentNode)\n        : parentNode;\n    const childNodes = options.treeAdapter.getChildNodes(container);\n    if (childNodes) {\n        for (const currentNode of childNodes) {\n            html += serializeNode(currentNode, options);\n        }\n    }\n    return html;\n}\nfunction serializeNode(node, options) {\n    if (options.treeAdapter.isElementNode(node)) {\n        return serializeElement(node, options);\n    }\n    if (options.treeAdapter.isTextNode(node)) {\n        return serializeTextNode(node, options);\n    }\n    if (options.treeAdapter.isCommentNode(node)) {\n        return serializeCommentNode(node, options);\n    }\n    if (options.treeAdapter.isDocumentTypeNode(node)) {\n        return serializeDocumentTypeNode(node, options);\n    }\n    // Return an empty string for unknown nodes\n    return '';\n}\nfunction serializeElement(node, options) {\n    const tn = options.treeAdapter.getTagName(node);\n    return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? '' : `${serializeChildNodes(node, options)}</${tn}>`}`;\n}\nfunction serializeAttributes(node, { treeAdapter }) {\n    let html = '';\n    for (const attr of treeAdapter.getAttrList(node)) {\n        html += ' ';\n        if (!attr.namespace) {\n            html += attr.name;\n        }\n        else\n            switch (attr.namespace) {\n                case NS.XML: {\n                    html += `xml:${attr.name}`;\n                    break;\n                }\n                case NS.XMLNS: {\n                    if (attr.name !== 'xmlns') {\n                        html += 'xmlns:';\n                    }\n                    html += attr.name;\n                    break;\n                }\n                case NS.XLINK: {\n                    html += `xlink:${attr.name}`;\n                    break;\n                }\n                default: {\n                    html += `${attr.prefix}:${attr.name}`;\n                }\n            }\n        html += `=\"${escapeAttribute(attr.value)}\"`;\n    }\n    return html;\n}\nfunction serializeTextNode(node, options) {\n    const { treeAdapter } = options;\n    const content = treeAdapter.getTextNodeContent(node);\n    const parent = treeAdapter.getParentNode(node);\n    const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n    return parentTn &&\n        treeAdapter.getNamespaceURI(parent) === NS.HTML &&\n        hasUnescapedText(parentTn, options.scriptingEnabled)\n        ? content\n        : escapeText(content);\n}\nfunction serializeCommentNode(node, { treeAdapter }) {\n    return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;\n}\nfunction serializeDocumentTypeNode(node, { treeAdapter }) {\n    return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;\n}\n//# sourceMappingURL=index.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module"}